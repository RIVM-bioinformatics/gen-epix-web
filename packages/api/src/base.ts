/* eslint-disable */
// @ts-nocheck
/**
 * Lab surveillance platform
 * Lab surveillance platform API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: ids-bioinformatics@rivm.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig, InternalAxiosRequestConfig, AxiosResponse } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "";

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    public static defaultRequestTimeout: number;
    public static baseUrl: string;
    public static onRequest: Array<(request: InternalAxiosRequestConfig) => InternalAxiosRequestConfig<unknown>> = [];
    public static onResponseFulfilled: Array<(response: AxiosResponse) => AxiosResponse> = [];
    public static onResponseRejected: Array<(error: unknown) => void> = [];    public static accessToken: string;
  
    protected configuration = new Configuration();
    protected axios: AxiosInstance;
  
    public constructor() {
      this.axios = globalAxios.create();
      this.axios.interceptors.request.use(request => {
        if (BaseAPI.onRequest?.length) {
          return BaseAPI.onRequest.reduce((prev, curr) => {
            return curr(prev);
          }, request);
        }
        return request;
      });
      this.axios.interceptors.response.use(response => {
        if (BaseAPI.onResponseFulfilled?.length) {
          BaseAPI.onResponseFulfilled.reduce((prev, curr) => {
            return curr(prev);
          }, response)
        }
        return response;
      }, (err: unknown) => {
        if (BaseAPI.onResponseRejected?.length) {
          BaseAPI.onResponseRejected.forEach(cb => cb(err));
        }
        return err;
      });
    }
};


/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}
