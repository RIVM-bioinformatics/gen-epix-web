import globalAxios, { isAxiosError } from 'axios';

var __defProp$2 = Object.defineProperty;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$2 = (obj, key, value) => __defNormalProp$2(obj, typeof key !== "symbol" ? key + "" : key, value);
class Configuration {
  constructor(param = {}) {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    __publicField$2(this, "apiKey");
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    __publicField$2(this, "username");
    __publicField$2(this, "defaultRequestTimeout");
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    __publicField$2(this, "password");
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    __publicField$2(this, "accessToken");
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    __publicField$2(this, "baseUrl");
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    __publicField$2(this, "baseOptions");
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    __publicField$2(this, "formDataCtor");
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.baseUrl = param.baseUrl;
    this.baseOptions = param.baseOptions;
    this.formDataCtor = param.formDataCtor;
    this.defaultRequestTimeout = param.defaultRequestTimeout;
  }
  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  isJsonMime(mime) {
    const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
  }
}

var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
const BASE_PATH = "";
const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "	",
  pipes: "|"
};
const _BaseAPI = class _BaseAPI {
  constructor() {
    __publicField$1(this, "configuration", new Configuration());
    __publicField$1(this, "axios");
    this.axios = globalAxios.create();
    this.axios.interceptors.request.use((request) => {
      if (_BaseAPI.onRequest?.length) {
        return _BaseAPI.onRequest.reduce((prev, curr) => {
          return curr(prev);
        }, request);
      }
      return request;
    });
    this.axios.interceptors.response.use((response) => {
      if (_BaseAPI.onResponseFulfilled?.length) {
        _BaseAPI.onResponseFulfilled.reduce((prev, curr) => {
          return curr(prev);
        }, response);
      }
      return response;
    }, (err) => {
      if (_BaseAPI.onResponseRejected?.length) {
        _BaseAPI.onResponseRejected.forEach((cb) => cb(err));
      }
      return err;
    });
  }
};
__publicField$1(_BaseAPI, "defaultRequestTimeout");
__publicField$1(_BaseAPI, "baseUrl");
__publicField$1(_BaseAPI, "onRequest", []);
__publicField$1(_BaseAPI, "onResponseFulfilled", []);
__publicField$1(_BaseAPI, "onResponseRejected", []);
__publicField$1(_BaseAPI, "accessToken");
let BaseAPI = _BaseAPI;
class RequiredError extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
}

const DUMMY_BASE_URL = "https://example.com";
const assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (parameter == null) return;
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== "" ? "." : ""}${currentKey}`)
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
const setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
const serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
const toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
const createRequestFunction = function(axiosArgs, globalAxios, _configuration) {
  return (axios = globalAxios) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: axiosArgs.url,
      timeout: BaseAPI.defaultRequestTimeout,
      baseURL: BaseAPI.baseUrl,
      headers: {
        ...axiosArgs.options.headers || {}
      },
      validateStatus: (code) => code >= 200 && code < 300
    };
    return axios.request(axiosRequestArgs).then((res) => {
      if (isAxiosError(res)) {
        throw res;
      }
      return res;
    });
  };
};

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, key + "" , value);
const AuthProtocol = {
  OAUTH2: "OAUTH2",
  OIDC: "OIDC"
};
const BooleanOperator = {
  AND: "AND",
  OR: "OR",
  NOT: "NOT",
  XOR: "XOR",
  NAND: "NAND",
  NOR: "NOR",
  XNOR: "XNOR",
  IMPLIES: "IMPLIES",
  NIMPLIES: "NIMPLIES"
};
const CaseClassification = {
  POSSIBLE: "POSSIBLE",
  PROBABLE: "PROBABLE",
  CONFIRMED: "CONFIRMED"
};
const CaseTypeSetCategoryPurpose = {
  CONTENT: "CONTENT",
  SECURITY: "SECURITY"
};
const ColType = {
  TEXT: "TEXT",
  CONTEXT_FREE_GRAMMAR_JSON: "CONTEXT_FREE_GRAMMAR_JSON",
  CONTEXT_FREE_GRAMMAR_XML: "CONTEXT_FREE_GRAMMAR_XML",
  REGEX: "REGEX",
  NOMINAL: "NOMINAL",
  ORDINAL: "ORDINAL",
  INTERVAL: "INTERVAL",
  TIME_DAY: "TIME_DAY",
  TIME_WEEK: "TIME_WEEK",
  TIME_MONTH: "TIME_MONTH",
  TIME_QUARTER: "TIME_QUARTER",
  TIME_YEAR: "TIME_YEAR",
  GEO_LATLON: "GEO_LATLON",
  GEO_REGION: "GEO_REGION",
  ID_DIRECT: "ID_DIRECT",
  ID_PSEUDONYMISED: "ID_PSEUDONYMISED",
  ID_ANONYMISED: "ID_ANONYMISED",
  DECIMAL_0: "DECIMAL_0",
  DECIMAL_1: "DECIMAL_1",
  DECIMAL_2: "DECIMAL_2",
  DECIMAL_3: "DECIMAL_3",
  DECIMAL_4: "DECIMAL_4",
  DECIMAL_5: "DECIMAL_5",
  DECIMAL_6: "DECIMAL_6",
  GENETIC_SEQUENCE: "GENETIC_SEQUENCE",
  GENETIC_DISTANCE: "GENETIC_DISTANCE",
  ORGANIZATION: "ORGANIZATION",
  OTHER: "OTHER"
};
const CommandName = {
  DataCollectionSetCrudCommand: "DataCollectionSetCrudCommand",
  DimCrudCommand: "DimCrudCommand",
  RetrieveGeneticSequenceByIdCommand: "RetrieveGeneticSequenceByIdCommand",
  CaseTypeSetCategoryCrudCommand: "CaseTypeSetCategoryCrudCommand",
  CaseSetMemberCrudCommand: "CaseSetMemberCrudCommand",
  RetrieveOrganizationAdminNameEmailsCommand: "RetrieveOrganizationAdminNameEmailsCommand",
  EtiologyCrudCommand: "EtiologyCrudCommand",
  GetOwnPermissionsCommand: "GetOwnPermissionsCommand",
  OrganizationAdminPolicyCrudCommand: "OrganizationAdminPolicyCrudCommand",
  DataCollectionSetDataCollectionUpdateAssociationCommand: "DataCollectionSetDataCollectionUpdateAssociationCommand",
  CasesCreateCommand: "CasesCreateCommand",
  CaseTypeColSetCrudCommand: "CaseTypeColSetCrudCommand",
  ConceptSetMemberCrudCommand: "ConceptSetMemberCrudCommand",
  RetrievePhylogeneticTreeBySequencesCommand: "RetrievePhylogeneticTreeBySequencesCommand",
  UserInvitationCrudCommand: "UserInvitationCrudCommand",
  OrganizationSetMemberCrudCommand: "OrganizationSetMemberCrudCommand",
  RetrieveAlleleProfileCommand: "RetrieveAlleleProfileCommand",
  CaseSetCategoryCrudCommand: "CaseSetCategoryCrudCommand",
  RetrieveCasesByIdCommand: "RetrieveCasesByIdCommand",
  TreeAlgorithmClassCrudCommand: "TreeAlgorithmClassCrudCommand",
  UpdateUserCommand: "UpdateUserCommand",
  DataCollectionSetMemberCrudCommand: "DataCollectionSetMemberCrudCommand",
  RegionSetCrudCommand: "RegionSetCrudCommand",
  CaseTypeSetMemberCrudCommand: "CaseTypeSetMemberCrudCommand",
  CaseDataCollectionLinkCrudCommand: "CaseDataCollectionLinkCrudCommand",
  UserShareCasePolicyCrudCommand: "UserShareCasePolicyCrudCommand",
  UserCrudCommand: "UserCrudCommand",
  RetrieveCaseSetStatsCommand: "RetrieveCaseSetStatsCommand",
  CaseTypeCrudCommand: "CaseTypeCrudCommand",
  CaseTypeColCrudCommand: "CaseTypeColCrudCommand",
  CaseTypeColSetCaseTypeColUpdateAssociationCommand: "CaseTypeColSetCaseTypeColUpdateAssociationCommand",
  RetrieveOrganizationContactCommand: "RetrieveOrganizationContactCommand",
  RegisterInvitedUserCommand: "RegisterInvitedUserCommand",
  InviteUserCommand: "InviteUserCommand",
  RetrieveCompleteUserCommand: "RetrieveCompleteUserCommand",
  TreeAlgorithmCrudCommand: "TreeAlgorithmCrudCommand",
  CaseCrudCommand: "CaseCrudCommand",
  OrganizationCrudCommand: "OrganizationCrudCommand",
  RetrieveCompleteCaseTypeCommand: "RetrieveCompleteCaseTypeCommand",
  DataCollectionCrudCommand: "DataCollectionCrudCommand",
  CaseSetDataCollectionLinkCrudCommand: "CaseSetDataCollectionLinkCrudCommand",
  RegionRelationCrudCommand: "RegionRelationCrudCommand",
  EtiologicalAgentCrudCommand: "EtiologicalAgentCrudCommand",
  CaseSetCrudCommand: "CaseSetCrudCommand",
  RegionCrudCommand: "RegionCrudCommand",
  SiteCrudCommand: "SiteCrudCommand",
  UserAccessCasePolicyCrudCommand: "UserAccessCasePolicyCrudCommand",
  CaseSetStatusCrudCommand: "CaseSetStatusCrudCommand",
  OrganizationSetOrganizationUpdateAssociationCommand: "OrganizationSetOrganizationUpdateAssociationCommand",
  RetrieveOutagesCommand: "RetrieveOutagesCommand",
  CaseTypeSetCrudCommand: "CaseTypeSetCrudCommand",
  RegionSetShapeCrudCommand: "RegionSetShapeCrudCommand",
  DiseaseEtiologicalAgentUpdateAssociationCommand: "DiseaseEtiologicalAgentUpdateAssociationCommand",
  ConceptSetConceptUpdateAssociationCommand: "ConceptSetConceptUpdateAssociationCommand",
  IdentifierIssuerCrudCommand: "IdentifierIssuerCrudCommand",
  ColCrudCommand: "ColCrudCommand",
  CaseTypeColSetMemberCrudCommand: "CaseTypeColSetMemberCrudCommand",
  OrganizationSetCrudCommand: "OrganizationSetCrudCommand",
  ConceptSetCrudCommand: "ConceptSetCrudCommand",
  RetrieveGeneticSequenceByCaseCommand: "RetrieveGeneticSequenceByCaseCommand",
  OrganizationAccessCasePolicyCrudCommand: "OrganizationAccessCasePolicyCrudCommand",
  RetrievePhylogeneticTreeByCasesCommand: "RetrievePhylogeneticTreeByCasesCommand",
  RetrieveCasesByQueryCommand: "RetrieveCasesByQueryCommand",
  GeneticDistanceProtocolCrudCommand: "GeneticDistanceProtocolCrudCommand",
  SubjectCrudCommand: "SubjectCrudCommand",
  CaseTypeSetCaseTypeUpdateAssociationCommand: "CaseTypeSetCaseTypeUpdateAssociationCommand",
  ContactCrudCommand: "ContactCrudCommand",
  RetrieveCaseTypeStatsCommand: "RetrieveCaseTypeStatsCommand",
  RetrieveContainingRegionCommand: "RetrieveContainingRegionCommand",
  CaseSetCreateCommand: "CaseSetCreateCommand",
  ConceptCrudCommand: "ConceptCrudCommand",
  SubjectIdentifierCrudCommand: "SubjectIdentifierCrudCommand",
  RetrieveCaseSetRightsCommand: "RetrieveCaseSetRightsCommand",
  DataCollectionRelationCrudCommand: "DataCollectionRelationCrudCommand",
  DiseaseCrudCommand: "DiseaseCrudCommand",
  UpdateUserOwnOrganizationCommand: "UpdateUserOwnOrganizationCommand",
  RetrieveCaseRightsCommand: "RetrieveCaseRightsCommand",
  OrganizationShareCasePolicyCrudCommand: "OrganizationShareCasePolicyCrudCommand",
  GetIdentityProvidersCommand: "GetIdentityProvidersCommand",
  OutageCrudCommand: "OutageCrudCommand"
};
const ComparisonOperator = {
  Less_Than: "<",
  Less_Than_Or_Equal_To: "<=",
  Equal: "=",
  Greater_Than_Or_Equal_To: ">=",
  Greater_Than: ">",
  Not_Equal: "!="
};
const ConceptSetType = {
  CONTEXT_FREE_GRAMMAR_JSON: "CONTEXT_FREE_GRAMMAR_JSON",
  CONTEXT_FREE_GRAMMAR_XML: "CONTEXT_FREE_GRAMMAR_XML",
  REGULAR_LANGUAGE: "REGULAR_LANGUAGE",
  NOMINAL: "NOMINAL",
  ORDINAL: "ORDINAL",
  INTERVAL: "INTERVAL"
};
const DimType = {
  TEXT: "TEXT",
  IDENTIFIER: "IDENTIFIER",
  NUMBER: "NUMBER",
  TIME: "TIME",
  GEO: "GEO",
  ORGANIZATION: "ORGANIZATION",
  OTHER: "OTHER"
};
const HealthStatus = {
  HEALTHY: "HEALTHY",
  UNHEALTHY: "UNHEALTHY"
};
const LogLevel = {
  FATAL: "FATAL",
  ERROR: "ERROR",
  WARN: "WARN",
  INFO: "INFO",
  DEBUG: "DEBUG",
  TRACE: "TRACE"
};
const OauthFlowType = {
  AUTHORIZATION_CODE: "AUTHORIZATION_CODE",
  CLIENT_CREDENTIALS: "CLIENT_CREDENTIALS",
  RESOURCE_OWNER: "RESOURCE_OWNER",
  HYBRID: "HYBRID",
  DEVICE_AUTHORIZATION: "DEVICE_AUTHORIZATION",
  PKCE: "PKCE"
};
const PermissionType = {
  CREATE: "CREATE",
  READ: "READ",
  UPDATE: "UPDATE",
  DELETE: "DELETE",
  EXECUTE: "EXECUTE"
};
const RegionRelationType = {
  IS_SEPARATE_FROM: "IS_SEPARATE_FROM",
  IS_ADJACENT_TO: "IS_ADJACENT_TO",
  IS_CONTAINED_IN: "IS_CONTAINED_IN",
  OVERLAPS_WITH: "OVERLAPS_WITH",
  CONTAINS: "CONTAINS"
};
const Role = {
  ROOT: "ROOT",
  APP_ADMIN: "APP_ADMIN",
  ORG_ADMIN: "ORG_ADMIN",
  METADATA_ADMIN: "METADATA_ADMIN",
  ORG_USER: "ORG_USER",
  GUEST: "GUEST",
  ROLE1: "ROLE1"
};
const TreeAlgorithmType = {
  SLINK: "SLINK",
  CLINK: "CLINK",
  UPGMA: "UPGMA",
  WPGMA: "WPGMA",
  UPGMC: "UPGMC",
  WPGMC: "WPGMC",
  VERSATILE: "VERSATILE",
  MISSQ: "MISSQ",
  MNSSQ: "MNSSQ",
  MIVAR: "MIVAR",
  MNVAR: "MNVAR",
  MINI_MAX: "MINI_MAX",
  HAUSDORFF: "HAUSDORFF",
  MIN_SUM_MEDOID: "MIN_SUM_MEDOID",
  MIN_SUM_INCREASE_MEDOID: "MIN_SUM_INCREASE_MEDOID",
  MEDOID: "MEDOID",
  MIN_ENERGY: "MIN_ENERGY",
  FITCH_MARGOLIASH: "FITCH_MARGOLIASH",
  MAX_PARSIMONY: "MAX_PARSIMONY",
  ML: "ML",
  BAYESIAN_INFERENCE: "BAYESIAN_INFERENCE",
  MIN_SPANNING: "MIN_SPANNING",
  NJ: "NJ"
};
const TypedCompositeFilterType = {
  COMPOSITE: "COMPOSITE"
};
const TypedDateRangeFilterType = {
  DATE_RANGE: "DATE_RANGE"
};
const TypedDatetimeRangeFilterType = {
  DATETIME_RANGE: "DATETIME_RANGE"
};
const TypedEqualsBooleanFilterType = {
  EQUALS_BOOLEAN: "EQUALS_BOOLEAN"
};
const TypedEqualsNumberFilterType = {
  EQUALS_NUMBER: "EQUALS_NUMBER"
};
const TypedEqualsStringFilterType = {
  EQUALS_STRING: "EQUALS_STRING"
};
const TypedEqualsUuidFilterType = {
  EQUALS_UUID: "EQUALS_UUID"
};
const TypedExistsFilterType = {
  EXISTS: "EXISTS"
};
const TypedNoFilterType = {
  NO_FILTER: "NO_FILTER"
};
const TypedNumberRangeFilterType = {
  NUMBER_RANGE: "NUMBER_RANGE"
};
const TypedNumberSetFilterType = {
  NUMBER_SET: "NUMBER_SET"
};
const TypedPartialDateRangeFilterType = {
  PARTIAL_DATE_RANGE: "PARTIAL_DATE_RANGE"
};
const TypedRegexFilterType = {
  REGEX: "REGEX"
};
const TypedStringSetFilterType = {
  STRING_SET: "STRING_SET"
};
const TypedUuidSetFilterType = {
  UUID_SET: "UUID_SET"
};
const AbacApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/organization_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/organization_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesDeleteSome: async (ids, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesDeleteSome", "ids", ids);
      const localVarPath = `/v1/organization_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesGetAll: async (options = {}) => {
      const localVarPath = `/v1/organization_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesGetOne", "objectId", objectId);
      const localVarPath = `/v1/organization_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesGetSome: async (ids, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesGetSome", "ids", ids);
      const localVarPath = `/v1/organization_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPostOne: async (organizationAccessCasePolicy, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPostOne", "organizationAccessCasePolicy", organizationAccessCasePolicy);
      const localVarPath = `/v1/organization_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPostQuery", "filter", filter);
      const localVarPath = `/v1/organization_access_case_policies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organization_access_case_policies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPostSome: async (organizationAccessCasePolicy, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPostSome", "organizationAccessCasePolicy", organizationAccessCasePolicy);
      const localVarPath = `/v1/organization_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} objectId 
     * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPutOne: async (objectId, organizationAccessCasePolicy, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPutOne", "objectId", objectId);
      assertParamExists("organizationAccessCasePoliciesPutOne", "organizationAccessCasePolicy", organizationAccessCasePolicy);
      const localVarPath = `/v1/organization_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAccessCasePoliciesPutSome: async (organizationAccessCasePolicy, options = {}) => {
      assertParamExists("organizationAccessCasePoliciesPutSome", "organizationAccessCasePolicy", organizationAccessCasePolicy);
      const localVarPath = `/v1/organization_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/organization_admin_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("organizationAdminPoliciesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/organization_admin_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesDeleteSome: async (ids, options = {}) => {
      assertParamExists("organizationAdminPoliciesDeleteSome", "ids", ids);
      const localVarPath = `/v1/organization_admin_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesGetAll: async (options = {}) => {
      const localVarPath = `/v1/organization_admin_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationAdminPoliciesGetOne", "objectId", objectId);
      const localVarPath = `/v1/organization_admin_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesGetSome: async (ids, options = {}) => {
      assertParamExists("organizationAdminPoliciesGetSome", "ids", ids);
      const localVarPath = `/v1/organization_admin_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {OrganizationAdminPolicy} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPostOne: async (organizationAdminPolicy, options = {}) => {
      assertParamExists("organizationAdminPoliciesPostOne", "organizationAdminPolicy", organizationAdminPolicy);
      const localVarPath = `/v1/organization_admin_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAdminPolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationAdminPoliciesPostQuery", "filter", filter);
      const localVarPath = `/v1/organization_admin_policies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationAdminPoliciesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organization_admin_policies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPostSome: async (organizationAdminPolicy, options = {}) => {
      assertParamExists("organizationAdminPoliciesPostSome", "organizationAdminPolicy", organizationAdminPolicy);
      const localVarPath = `/v1/organization_admin_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAdminPolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} objectId 
     * @param {OrganizationAdminPolicy} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPutOne: async (objectId, organizationAdminPolicy, options = {}) => {
      assertParamExists("organizationAdminPoliciesPutOne", "objectId", objectId);
      assertParamExists("organizationAdminPoliciesPutOne", "organizationAdminPolicy", organizationAdminPolicy);
      const localVarPath = `/v1/organization_admin_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAdminPolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationAdminPoliciesPutSome: async (organizationAdminPolicy, options = {}) => {
      assertParamExists("organizationAdminPoliciesPutSome", "organizationAdminPolicy", organizationAdminPolicy);
      const localVarPath = `/v1/organization_admin_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationAdminPolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/organization_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("organizationShareCasePoliciesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/organization_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesDeleteSome: async (ids, options = {}) => {
      assertParamExists("organizationShareCasePoliciesDeleteSome", "ids", ids);
      const localVarPath = `/v1/organization_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesGetAll: async (options = {}) => {
      const localVarPath = `/v1/organization_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationShareCasePoliciesGetOne", "objectId", objectId);
      const localVarPath = `/v1/organization_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesGetSome: async (ids, options = {}) => {
      assertParamExists("organizationShareCasePoliciesGetSome", "ids", ids);
      const localVarPath = `/v1/organization_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPostOne: async (organizationShareCasePolicy, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPostOne", "organizationShareCasePolicy", organizationShareCasePolicy);
      const localVarPath = `/v1/organization_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPostQuery", "filter", filter);
      const localVarPath = `/v1/organization_share_case_policies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organization_share_case_policies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPostSome: async (organizationShareCasePolicy, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPostSome", "organizationShareCasePolicy", organizationShareCasePolicy);
      const localVarPath = `/v1/organization_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} objectId 
     * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPutOne: async (objectId, organizationShareCasePolicy, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPutOne", "objectId", objectId);
      assertParamExists("organizationShareCasePoliciesPutOne", "organizationShareCasePolicy", organizationShareCasePolicy);
      const localVarPath = `/v1/organization_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationShareCasePoliciesPutSome: async (organizationShareCasePolicy, options = {}) => {
      assertParamExists("organizationShareCasePoliciesPutSome", "organizationShareCasePolicy", organizationShareCasePolicy);
      const localVarPath = `/v1/organization_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/user_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("userAccessCasePoliciesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/user_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesDeleteSome: async (ids, options = {}) => {
      assertParamExists("userAccessCasePoliciesDeleteSome", "ids", ids);
      const localVarPath = `/v1/user_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesGetAll: async (options = {}) => {
      const localVarPath = `/v1/user_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesGetOne: async (objectId, options = {}) => {
      assertParamExists("userAccessCasePoliciesGetOne", "objectId", objectId);
      const localVarPath = `/v1/user_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesGetSome: async (ids, options = {}) => {
      assertParamExists("userAccessCasePoliciesGetSome", "ids", ids);
      const localVarPath = `/v1/user_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {UserAccessCasePolicy} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPostOne: async (userAccessCasePolicy, options = {}) => {
      assertParamExists("userAccessCasePoliciesPostOne", "userAccessCasePolicy", userAccessCasePolicy);
      const localVarPath = `/v1/user_access_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPostQuery: async (filter, options = {}) => {
      assertParamExists("userAccessCasePoliciesPostQuery", "filter", filter);
      const localVarPath = `/v1/user_access_case_policies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("userAccessCasePoliciesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/user_access_case_policies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPostSome: async (userAccessCasePolicy, options = {}) => {
      assertParamExists("userAccessCasePoliciesPostSome", "userAccessCasePolicy", userAccessCasePolicy);
      const localVarPath = `/v1/user_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} objectId 
     * @param {UserAccessCasePolicy} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPutOne: async (objectId, userAccessCasePolicy, options = {}) => {
      assertParamExists("userAccessCasePoliciesPutOne", "objectId", objectId);
      assertParamExists("userAccessCasePoliciesPutOne", "userAccessCasePolicy", userAccessCasePolicy);
      const localVarPath = `/v1/user_access_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAccessCasePoliciesPutSome: async (userAccessCasePolicy, options = {}) => {
      assertParamExists("userAccessCasePoliciesPutSome", "userAccessCasePolicy", userAccessCasePolicy);
      const localVarPath = `/v1/user_access_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userAccessCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/user_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("userShareCasePoliciesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/user_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesDeleteSome: async (ids, options = {}) => {
      assertParamExists("userShareCasePoliciesDeleteSome", "ids", ids);
      const localVarPath = `/v1/user_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesGetAll: async (options = {}) => {
      const localVarPath = `/v1/user_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesGetOne: async (objectId, options = {}) => {
      assertParamExists("userShareCasePoliciesGetOne", "objectId", objectId);
      const localVarPath = `/v1/user_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesGetSome: async (ids, options = {}) => {
      assertParamExists("userShareCasePoliciesGetSome", "ids", ids);
      const localVarPath = `/v1/user_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {UserShareCasePolicy} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPostOne: async (userShareCasePolicy, options = {}) => {
      assertParamExists("userShareCasePoliciesPostOne", "userShareCasePolicy", userShareCasePolicy);
      const localVarPath = `/v1/user_share_case_policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPostQuery: async (filter, options = {}) => {
      assertParamExists("userShareCasePoliciesPostQuery", "filter", filter);
      const localVarPath = `/v1/user_share_case_policies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("userShareCasePoliciesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/user_share_case_policies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPostSome: async (userShareCasePolicy, options = {}) => {
      assertParamExists("userShareCasePoliciesPostSome", "userShareCasePolicy", userShareCasePolicy);
      const localVarPath = `/v1/user_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} objectId 
     * @param {UserShareCasePolicy} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPutOne: async (objectId, userShareCasePolicy, options = {}) => {
      assertParamExists("userShareCasePoliciesPutOne", "objectId", objectId);
      assertParamExists("userShareCasePoliciesPutOne", "userShareCasePolicy", userShareCasePolicy);
      const localVarPath = `/v1/user_share_case_policies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userShareCasePoliciesPutSome: async (userShareCasePolicy, options = {}) => {
      assertParamExists("userShareCasePoliciesPutSome", "userShareCasePolicy", userShareCasePolicy);
      const localVarPath = `/v1/user_share_case_policies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userShareCasePolicy, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const AbacApiFp = function(configuration) {
  const localVarAxiosParamCreator = AbacApiAxiosParamCreator(configuration);
  return {
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPostOne(organizationAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPostOne(organizationAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPostSome(organizationAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPostSome(organizationAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {string} objectId 
     * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPutOne(objectId, organizationAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPutOne(objectId, organizationAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
     * @summary Organization Access Case Policies
     * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAccessCasePoliciesPutSome(organizationAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAccessCasePoliciesPutSome(organizationAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {OrganizationAdminPolicy} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPostOne(organizationAdminPolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPostOne(organizationAdminPolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPostSome(organizationAdminPolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPostSome(organizationAdminPolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {string} objectId 
     * @param {OrganizationAdminPolicy} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPutOne(objectId, organizationAdminPolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPutOne(objectId, organizationAdminPolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Admin Policies
     * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationAdminPoliciesPutSome(organizationAdminPolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationAdminPoliciesPutSome(organizationAdminPolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPostOne(organizationShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPostOne(organizationShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPostSome(organizationShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPostSome(organizationShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {string} objectId 
     * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPutOne(objectId, organizationShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPutOne(objectId, organizationShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
     * @summary Organization Share Case Policies
     * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationShareCasePoliciesPutSome(organizationShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationShareCasePoliciesPutSome(organizationShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {UserAccessCasePolicy} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPostOne(userAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPostOne(userAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPostSome(userAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPostSome(userAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {string} objectId 
     * @param {UserAccessCasePolicy} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPutOne(objectId, userAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPutOne(objectId, userAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
     * @summary User Access Case Policies
     * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAccessCasePoliciesPutSome(userAccessCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAccessCasePoliciesPutSome(userAccessCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {UserShareCasePolicy} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPostOne(userShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPostOne(userShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPostSome(userShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPostSome(userShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {string} objectId 
     * @param {UserShareCasePolicy} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPutOne(objectId, userShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPutOne(objectId, userShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
     * @summary User Share Case Policies
     * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userShareCasePoliciesPutSome(userShareCasePolicy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userShareCasePoliciesPutSome(userShareCasePolicy, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _AbacApi = class _AbacApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _AbacApi();
    return this.instance;
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesDeleteAll(options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesDeleteOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesDeleteSome(ids, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesGetAll(options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesGetOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesGetSome(ids, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPostOne(organizationAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPostOne(organizationAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPostQuery(filter, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPostQueryIds(filter, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPostSome(organizationAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPostSome(organizationAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {string} objectId 
   * @param {OrganizationAccessCasePolicy} organizationAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPutOne(objectId, organizationAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPutOne(objectId, organizationAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the access rights of an organization to a particular data collection.     If an organization does not have a policy to a data collection, it has no access     rights to that data collection.      The access rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no access rights to that data     collection for that case type.
   * @summary Organization Access Case Policies
   * @param {Array<OrganizationAccessCasePolicy>} organizationAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAccessCasePoliciesPutSome(organizationAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationAccessCasePoliciesPutSome(organizationAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesDeleteAll(options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesDeleteOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesDeleteSome(ids, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesGetAll(options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesGetOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesGetSome(ids, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {OrganizationAdminPolicy} organizationAdminPolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPostOne(organizationAdminPolicy, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPostOne(organizationAdminPolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPostQuery(filter, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPostQueryIds(filter, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPostSome(organizationAdminPolicy, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPostSome(organizationAdminPolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {string} objectId 
   * @param {OrganizationAdminPolicy} organizationAdminPolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPutOne(objectId, organizationAdminPolicy, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPutOne(objectId, organizationAdminPolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Admin Policies
   * @param {Array<OrganizationAdminPolicy>} organizationAdminPolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationAdminPoliciesPutSome(organizationAdminPolicy, options) {
    return AbacApiFp(this.configuration).organizationAdminPoliciesPutSome(organizationAdminPolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesDeleteAll(options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesDeleteOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesDeleteSome(ids, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesGetAll(options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesGetOne(objectId, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesGetSome(ids, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPostOne(organizationShareCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPostOne(organizationShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPostQuery(filter, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPostQueryIds(filter, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPostSome(organizationShareCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPostSome(organizationShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {string} objectId 
   * @param {OrganizationShareCasePolicy} organizationShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPutOne(objectId, organizationShareCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPutOne(objectId, organizationShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores any additional case or case set share rights of an organization to a     particular data collection, if the case or case set is already in a particular     other data collection.      The share rights are limited to the case types in the case type set. If a case type     is not in the case type set, the organization has no share rights to that data     collection for that case type.
   * @summary Organization Share Case Policies
   * @param {Array<OrganizationShareCasePolicy>} organizationShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  organizationShareCasePoliciesPutSome(organizationShareCasePolicy, options) {
    return AbacApiFp(this.configuration).organizationShareCasePoliciesPutSome(organizationShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesDeleteAll(options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesDeleteOne(objectId, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesDeleteSome(ids, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesGetAll(options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesGetOne(objectId, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesGetSome(ids, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {UserAccessCasePolicy} userAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPostOne(userAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPostOne(userAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPostQuery(filter, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPostQueryIds(filter, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPostSome(userAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPostSome(userAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {string} objectId 
   * @param {UserAccessCasePolicy} userAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPutOne(objectId, userAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPutOne(objectId, userAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum access rights of a user to a particular data collection,     analogous to the organization access case policy.      The actual access rights of a user are derived as the intersection of their maximum     access rights stored here, and the access rights of the organization to which they     belong.
   * @summary User Access Case Policies
   * @param {Array<UserAccessCasePolicy>} userAccessCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userAccessCasePoliciesPutSome(userAccessCasePolicy, options) {
    return AbacApiFp(this.configuration).userAccessCasePoliciesPutSome(userAccessCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesDeleteAll(options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesDeleteOne(objectId, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesDeleteSome(ids, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesGetAll(options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesGetOne(objectId, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesGetSome(ids, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {UserShareCasePolicy} userShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPostOne(userShareCasePolicy, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPostOne(userShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPostQuery(filter, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPostQueryIds(filter, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPostSome(userShareCasePolicy, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPostSome(userShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {string} objectId 
   * @param {UserShareCasePolicy} userShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPutOne(objectId, userShareCasePolicy, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPutOne(objectId, userShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Stores the maximum share rights of a user to a particular data collection,     analogous to the organization share case policy.      The actual share rights of a user are derived as the intersection of their maximum     share rights stored here, and the share rights of the organization to which they     belong.
   * @summary User Share Case Policies
   * @param {Array<UserShareCasePolicy>} userShareCasePolicy 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbacApi
   */
  userShareCasePoliciesPutSome(userShareCasePolicy, options) {
    return AbacApiFp(this.configuration).userShareCasePoliciesPutSome(userShareCasePolicy, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_AbacApi, "instance");
let AbacApi = _AbacApi;
const AuthApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Identityprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityProvidersGetAll: async (options = {}) => {
      const localVarPath = `/v1/identity_providers`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Userinvitations
     * @param {UserInvitationRequestBody} userInvitationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsPostOne: async (userInvitationRequestBody, options = {}) => {
      assertParamExists("userInvitationsPostOne", "userInvitationRequestBody", userInvitationRequestBody);
      const localVarPath = `/v1/user_invitations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(userInvitationRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Registerinviteduser
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userRegistrationsPostOne: async (token, options = {}) => {
      assertParamExists("userRegistrationsPostOne", "token", token);
      const localVarPath = `/v1/user_registrations/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(token)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const AuthApiFp = function(configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Identityprovider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identityProvidersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identityProvidersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Userinvitations
     * @param {UserInvitationRequestBody} userInvitationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsPostOne(userInvitationRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsPostOne(userInvitationRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Registerinviteduser
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userRegistrationsPostOne(token, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userRegistrationsPostOne(token, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _AuthApi = class _AuthApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _AuthApi();
    return this.instance;
  }
  /**
   * 
   * @summary Identityprovider
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  identityProvidersGetAll(options) {
    return AuthApiFp(this.configuration).identityProvidersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Userinvitations
   * @param {UserInvitationRequestBody} userInvitationRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  userInvitationsPostOne(userInvitationRequestBody, options) {
    return AuthApiFp(this.configuration).userInvitationsPostOne(userInvitationRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Registerinviteduser
   * @param {string} token 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  userRegistrationsPostOne(token, options) {
    return AuthApiFp(this.configuration).userRegistrationsPostOne(token, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_AuthApi, "instance");
let AuthApi = _AuthApi;
const CaseApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Case Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseDataCollectionLinksDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseDataCollectionLinksDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksGetOne: async (objectId, options = {}) => {
      assertParamExists("caseDataCollectionLinksGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksGetSome: async (ids, options = {}) => {
      assertParamExists("caseDataCollectionLinksGetSome", "ids", ids);
      const localVarPath = `/v1/case_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {CaseDataCollectionLink} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPostOne: async (caseDataCollectionLink, options = {}) => {
      assertParamExists("caseDataCollectionLinksPostOne", "caseDataCollectionLink", caseDataCollectionLink);
      const localVarPath = `/v1/case_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPostQuery: async (filter, options = {}) => {
      assertParamExists("caseDataCollectionLinksPostQuery", "filter", filter);
      const localVarPath = `/v1/case_data_collection_links/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseDataCollectionLinksPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_data_collection_links/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPostSome: async (caseDataCollectionLink, options = {}) => {
      assertParamExists("caseDataCollectionLinksPostSome", "caseDataCollectionLink", caseDataCollectionLink);
      const localVarPath = `/v1/case_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} objectId 
     * @param {CaseDataCollectionLink} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPutOne: async (objectId, caseDataCollectionLink, options = {}) => {
      assertParamExists("caseDataCollectionLinksPutOne", "objectId", objectId);
      assertParamExists("caseDataCollectionLinksPutOne", "caseDataCollectionLink", caseDataCollectionLink);
      const localVarPath = `/v1/case_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseDataCollectionLinksPutSome: async (caseDataCollectionLink, options = {}) => {
      assertParamExists("caseDataCollectionLinksPutSome", "caseDataCollectionLink", caseDataCollectionLink);
      const localVarPath = `/v1/case_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseSetCategoriesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseSetCategoriesDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesGetOne: async (objectId, options = {}) => {
      assertParamExists("caseSetCategoriesGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesGetSome: async (ids, options = {}) => {
      assertParamExists("caseSetCategoriesGetSome", "ids", ids);
      const localVarPath = `/v1/case_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {CaseSetCategory} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPostOne: async (caseSetCategory, options = {}) => {
      assertParamExists("caseSetCategoriesPostOne", "caseSetCategory", caseSetCategory);
      const localVarPath = `/v1/case_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPostQuery: async (filter, options = {}) => {
      assertParamExists("caseSetCategoriesPostQuery", "filter", filter);
      const localVarPath = `/v1/case_set_categories/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseSetCategoriesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_set_categories/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Array<CaseSetCategory>} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPostSome: async (caseSetCategory, options = {}) => {
      assertParamExists("caseSetCategoriesPostSome", "caseSetCategory", caseSetCategory);
      const localVarPath = `/v1/case_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} objectId 
     * @param {CaseSetCategory} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPutOne: async (objectId, caseSetCategory, options = {}) => {
      assertParamExists("caseSetCategoriesPutOne", "objectId", objectId);
      assertParamExists("caseSetCategoriesPutOne", "caseSetCategory", caseSetCategory);
      const localVarPath = `/v1/case_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Array<CaseSetCategory>} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetCategoriesPutSome: async (caseSetCategory, options = {}) => {
      assertParamExists("caseSetCategoriesPutSome", "caseSetCategory", caseSetCategory);
      const localVarPath = `/v1/case_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_set_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksGetOne: async (objectId, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksGetSome: async (ids, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksGetSome", "ids", ids);
      const localVarPath = `/v1/case_set_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPostOne: async (caseSetDataCollectionLink, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPostOne", "caseSetDataCollectionLink", caseSetDataCollectionLink);
      const localVarPath = `/v1/case_set_data_collection_links`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPostQuery: async (filter, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPostQuery", "filter", filter);
      const localVarPath = `/v1/case_set_data_collection_links/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_set_data_collection_links/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPostSome: async (caseSetDataCollectionLink, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPostSome", "caseSetDataCollectionLink", caseSetDataCollectionLink);
      const localVarPath = `/v1/case_set_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} objectId 
     * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPutOne: async (objectId, caseSetDataCollectionLink, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPutOne", "objectId", objectId);
      assertParamExists("caseSetDataCollectionLinksPutOne", "caseSetDataCollectionLink", caseSetDataCollectionLink);
      const localVarPath = `/v1/case_set_data_collection_links/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetDataCollectionLinksPutSome: async (caseSetDataCollectionLink, options = {}) => {
      assertParamExists("caseSetDataCollectionLinksPutSome", "caseSetDataCollectionLink", caseSetDataCollectionLink);
      const localVarPath = `/v1/case_set_data_collection_links/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetDataCollectionLink, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("caseSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("caseSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/case_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {CaseSetMember} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPostOne: async (caseSetMember, options = {}) => {
      assertParamExists("caseSetMembersPostOne", "caseSetMember", caseSetMember);
      const localVarPath = `/v1/case_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("caseSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/case_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Array<CaseSetMember>} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPostSome: async (caseSetMember, options = {}) => {
      assertParamExists("caseSetMembersPostSome", "caseSetMember", caseSetMember);
      const localVarPath = `/v1/case_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} objectId 
     * @param {CaseSetMember} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPutOne: async (objectId, caseSetMember, options = {}) => {
      assertParamExists("caseSetMembersPutOne", "objectId", objectId);
      assertParamExists("caseSetMembersPutOne", "caseSetMember", caseSetMember);
      const localVarPath = `/v1/case_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Array<CaseSetMember>} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetMembersPutSome: async (caseSetMember, options = {}) => {
      assertParamExists("caseSetMembersPutSome", "caseSetMember", caseSetMember);
      const localVarPath = `/v1/case_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_statuses`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseSetStatusesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_statuses/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseSetStatusesDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_set_statuses/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_set_statuses`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesGetOne: async (objectId, options = {}) => {
      assertParamExists("caseSetStatusesGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_set_statuses/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesGetSome: async (ids, options = {}) => {
      assertParamExists("caseSetStatusesGetSome", "ids", ids);
      const localVarPath = `/v1/case_set_statuses/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {CaseSetStatus} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPostOne: async (caseSetStatus, options = {}) => {
      assertParamExists("caseSetStatusesPostOne", "caseSetStatus", caseSetStatus);
      const localVarPath = `/v1/case_set_statuses`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetStatus, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPostQuery: async (filter, options = {}) => {
      assertParamExists("caseSetStatusesPostQuery", "filter", filter);
      const localVarPath = `/v1/case_set_statuses/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseSetStatusesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_set_statuses/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Array<CaseSetStatus>} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPostSome: async (caseSetStatus, options = {}) => {
      assertParamExists("caseSetStatusesPostSome", "caseSetStatus", caseSetStatus);
      const localVarPath = `/v1/case_set_statuses/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetStatus, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} objectId 
     * @param {CaseSetStatus} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPutOne: async (objectId, caseSetStatus, options = {}) => {
      assertParamExists("caseSetStatusesPutOne", "objectId", objectId);
      assertParamExists("caseSetStatusesPutOne", "caseSetStatus", caseSetStatus);
      const localVarPath = `/v1/case_set_statuses/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetStatus, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Array<CaseSetStatus>} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetStatusesPutSome: async (caseSetStatus, options = {}) => {
      assertParamExists("caseSetStatusesPutSome", "caseSetStatus", caseSetStatus);
      const localVarPath = `/v1/case_set_statuses/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSetStatus, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("caseSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsGetSome: async (ids, options = {}) => {
      assertParamExists("caseSetsGetSome", "ids", ids);
      const localVarPath = `/v1/case_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("caseSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/case_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} objectId 
     * @param {CaseSet} caseSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsPutOne: async (objectId, caseSet, options = {}) => {
      assertParamExists("caseSetsPutOne", "objectId", objectId);
      assertParamExists("caseSetsPutOne", "caseSet", caseSet);
      const localVarPath = `/v1/case_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Sets
     * @param {Array<CaseSet>} caseSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseSetsPutSome: async (caseSet, options = {}) => {
      assertParamExists("caseSetsPutSome", "caseSet", caseSet);
      const localVarPath = `/v1/case_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_col_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_col_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_col_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_col_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_col_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_col_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {CaseTypeColSetMember} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPostOne: async (caseTypeColSetMember, options = {}) => {
      assertParamExists("caseTypeColSetMembersPostOne", "caseTypeColSetMember", caseTypeColSetMember);
      const localVarPath = `/v1/case_type_col_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeColSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_col_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeColSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_col_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPostSome: async (caseTypeColSetMember, options = {}) => {
      assertParamExists("caseTypeColSetMembersPostSome", "caseTypeColSetMember", caseTypeColSetMember);
      const localVarPath = `/v1/case_type_col_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} objectId 
     * @param {CaseTypeColSetMember} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPutOne: async (objectId, caseTypeColSetMember, options = {}) => {
      assertParamExists("caseTypeColSetMembersPutOne", "objectId", objectId);
      assertParamExists("caseTypeColSetMembersPutOne", "caseTypeColSetMember", caseTypeColSetMember);
      const localVarPath = `/v1/case_type_col_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetMembersPutSome: async (caseTypeColSetMember, options = {}) => {
      assertParamExists("caseTypeColSetMembersPutSome", "caseTypeColSetMember", caseTypeColSetMember);
      const localVarPath = `/v1/case_type_col_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_col_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_col_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_col_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_col_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_col_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColSetsGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_col_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {CaseTypeColSet} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPostOne: async (caseTypeColSet, options = {}) => {
      assertParamExists("caseTypeColSetsPostOne", "caseTypeColSet", caseTypeColSet);
      const localVarPath = `/v1/case_type_col_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeColSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_col_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeColSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_col_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Array<CaseTypeColSet>} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPostSome: async (caseTypeColSet, options = {}) => {
      assertParamExists("caseTypeColSetsPostSome", "caseTypeColSet", caseTypeColSet);
      const localVarPath = `/v1/case_type_col_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Casetypecolset Casetypecol
     * @param {string} caseTypeColSetId 
     * @param {UpdateCaseTypeColSetCaseTypeColsRequestBody} updateCaseTypeColSetCaseTypeColsRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPutCaseTypeCols: async (caseTypeColSetId, updateCaseTypeColSetCaseTypeColsRequestBody, options = {}) => {
      assertParamExists("caseTypeColSetsPutCaseTypeCols", "caseTypeColSetId", caseTypeColSetId);
      assertParamExists("caseTypeColSetsPutCaseTypeCols", "updateCaseTypeColSetCaseTypeColsRequestBody", updateCaseTypeColSetCaseTypeColsRequestBody);
      const localVarPath = `/v1/case_type_col_sets/{case_type_col_set_id}/case_type_cols`.replace(`{${"case_type_col_set_id"}}`, encodeURIComponent(String(caseTypeColSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateCaseTypeColSetCaseTypeColsRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} objectId 
     * @param {CaseTypeColSet} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPutOne: async (objectId, caseTypeColSet, options = {}) => {
      assertParamExists("caseTypeColSetsPutOne", "objectId", objectId);
      assertParamExists("caseTypeColSetsPutOne", "caseTypeColSet", caseTypeColSet);
      const localVarPath = `/v1/case_type_col_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Array<CaseTypeColSet>} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColSetsPutSome: async (caseTypeColSet, options = {}) => {
      assertParamExists("caseTypeColSetsPutSome", "caseTypeColSet", caseTypeColSet);
      const localVarPath = `/v1/case_type_col_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeColSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColsDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeColsGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeColsGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {CaseTypeCol} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPostOne: async (caseTypeCol, options = {}) => {
      assertParamExists("caseTypeColsPostOne", "caseTypeCol", caseTypeCol);
      const localVarPath = `/v1/case_type_cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeCol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeColsPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_cols/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeColsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_cols/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Array<CaseTypeCol>} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPostSome: async (caseTypeCol, options = {}) => {
      assertParamExists("caseTypeColsPostSome", "caseTypeCol", caseTypeCol);
      const localVarPath = `/v1/case_type_cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeCol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} objectId 
     * @param {CaseTypeCol} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPutOne: async (objectId, caseTypeCol, options = {}) => {
      assertParamExists("caseTypeColsPutOne", "objectId", objectId);
      assertParamExists("caseTypeColsPutOne", "caseTypeCol", caseTypeCol);
      const localVarPath = `/v1/case_type_cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeCol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Array<CaseTypeCol>} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeColsPutSome: async (caseTypeCol, options = {}) => {
      assertParamExists("caseTypeColsPutSome", "caseTypeCol", caseTypeCol);
      const localVarPath = `/v1/case_type_cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeCol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetCategoriesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetCategoriesDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetCategoriesGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetCategoriesGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {CaseTypeSetCategory} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPostOne: async (caseTypeSetCategory, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPostOne", "caseTypeSetCategory", caseTypeSetCategory);
      const localVarPath = `/v1/case_type_set_categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_set_categories/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_set_categories/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPostSome: async (caseTypeSetCategory, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPostSome", "caseTypeSetCategory", caseTypeSetCategory);
      const localVarPath = `/v1/case_type_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} objectId 
     * @param {CaseTypeSetCategory} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPutOne: async (objectId, caseTypeSetCategory, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPutOne", "objectId", objectId);
      assertParamExists("caseTypeSetCategoriesPutOne", "caseTypeSetCategory", caseTypeSetCategory);
      const localVarPath = `/v1/case_type_set_categories/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetCategoriesPutSome: async (caseTypeSetCategory, options = {}) => {
      assertParamExists("caseTypeSetCategoriesPutSome", "caseTypeSetCategory", caseTypeSetCategory);
      const localVarPath = `/v1/case_type_set_categories/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetCategory, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {CaseTypeSetMember} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPostOne: async (caseTypeSetMember, options = {}) => {
      assertParamExists("caseTypeSetMembersPostOne", "caseTypeSetMember", caseTypeSetMember);
      const localVarPath = `/v1/case_type_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPostSome: async (caseTypeSetMember, options = {}) => {
      assertParamExists("caseTypeSetMembersPostSome", "caseTypeSetMember", caseTypeSetMember);
      const localVarPath = `/v1/case_type_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} objectId 
     * @param {CaseTypeSetMember} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPutOne: async (objectId, caseTypeSetMember, options = {}) => {
      assertParamExists("caseTypeSetMembersPutOne", "objectId", objectId);
      assertParamExists("caseTypeSetMembersPutOne", "caseTypeSetMember", caseTypeSetMember);
      const localVarPath = `/v1/case_type_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetMembersPutSome: async (caseTypeSetMember, options = {}) => {
      assertParamExists("caseTypeSetMembersPutSome", "caseTypeSetMember", caseTypeSetMember);
      const localVarPath = `/v1/case_type_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_type_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_type_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypeSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_type_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypeSetsGetSome", "ids", ids);
      const localVarPath = `/v1/case_type_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {CaseTypeSet} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPostOne: async (caseTypeSet, options = {}) => {
      assertParamExists("caseTypeSetsPostOne", "caseTypeSet", caseTypeSet);
      const localVarPath = `/v1/case_type_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypeSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/case_type_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypeSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_type_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Array<CaseTypeSet>} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPostSome: async (caseTypeSet, options = {}) => {
      assertParamExists("caseTypeSetsPostSome", "caseTypeSet", caseTypeSet);
      const localVarPath = `/v1/case_type_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Casetypeset Casetype
     * @param {string} caseTypeSetId 
     * @param {UpdateCaseTypeSetCaseTypesRequestBody} updateCaseTypeSetCaseTypesRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPutCaseTypes: async (caseTypeSetId, updateCaseTypeSetCaseTypesRequestBody, options = {}) => {
      assertParamExists("caseTypeSetsPutCaseTypes", "caseTypeSetId", caseTypeSetId);
      assertParamExists("caseTypeSetsPutCaseTypes", "updateCaseTypeSetCaseTypesRequestBody", updateCaseTypeSetCaseTypesRequestBody);
      const localVarPath = `/v1/case_type_sets/{case_type_set_id}/case_types`.replace(`{${"case_type_set_id"}}`, encodeURIComponent(String(caseTypeSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateCaseTypeSetCaseTypesRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} objectId 
     * @param {CaseTypeSet} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPutOne: async (objectId, caseTypeSet, options = {}) => {
      assertParamExists("caseTypeSetsPutOne", "objectId", objectId);
      assertParamExists("caseTypeSetsPutOne", "caseTypeSet", caseTypeSet);
      const localVarPath = `/v1/case_type_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Array<CaseTypeSet>} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypeSetsPutSome: async (caseTypeSet, options = {}) => {
      assertParamExists("caseTypeSetsPutSome", "caseTypeSet", caseTypeSet);
      const localVarPath = `/v1/case_type_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseTypeSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/case_types`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("caseTypesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/case_types/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesDeleteSome: async (ids, options = {}) => {
      assertParamExists("caseTypesDeleteSome", "ids", ids);
      const localVarPath = `/v1/case_types/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesGetAll: async (options = {}) => {
      const localVarPath = `/v1/case_types`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesGetOne: async (objectId, options = {}) => {
      assertParamExists("caseTypesGetOne", "objectId", objectId);
      const localVarPath = `/v1/case_types/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesGetSome: async (ids, options = {}) => {
      assertParamExists("caseTypesGetSome", "ids", ids);
      const localVarPath = `/v1/case_types/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {CaseType} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPostOne: async (caseType, options = {}) => {
      assertParamExists("caseTypesPostOne", "caseType", caseType);
      const localVarPath = `/v1/case_types`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseType, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPostQuery: async (filter, options = {}) => {
      assertParamExists("caseTypesPostQuery", "filter", filter);
      const localVarPath = `/v1/case_types/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("caseTypesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/case_types/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {Array<CaseType>} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPostSome: async (caseType, options = {}) => {
      assertParamExists("caseTypesPostSome", "caseType", caseType);
      const localVarPath = `/v1/case_types/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseType, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {string} objectId 
     * @param {CaseType} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPutOne: async (objectId, caseType, options = {}) => {
      assertParamExists("caseTypesPutOne", "objectId", objectId);
      assertParamExists("caseTypesPutOne", "caseType", caseType);
      const localVarPath = `/v1/case_types/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseType, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Case Types
     * @param {Array<CaseType>} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    caseTypesPutSome: async (caseType, options = {}) => {
      assertParamExists("caseTypesPutSome", "caseType", caseType);
      const localVarPath = `/v1/case_types/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseType, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/cases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("casesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/cases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesDeleteSome: async (ids, options = {}) => {
      assertParamExists("casesDeleteSome", "ids", ids);
      const localVarPath = `/v1/cases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesGetAll: async (options = {}) => {
      const localVarPath = `/v1/cases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesGetOne: async (objectId, options = {}) => {
      assertParamExists("casesGetOne", "objectId", objectId);
      const localVarPath = `/v1/cases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesGetSome: async (ids, options = {}) => {
      assertParamExists("casesGetSome", "ids", ids);
      const localVarPath = `/v1/cases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Case} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPostOne: async (_case, options = {}) => {
      assertParamExists("casesPostOne", "_case", _case);
      const localVarPath = `/v1/cases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(_case, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPostQuery: async (filter, options = {}) => {
      assertParamExists("casesPostQuery", "filter", filter);
      const localVarPath = `/v1/cases/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("casesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/cases/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Array<Case>} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPostSome: async (_case, options = {}) => {
      assertParamExists("casesPostSome", "_case", _case);
      const localVarPath = `/v1/cases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(_case, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} objectId 
     * @param {Case} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPutOne: async (objectId, _case, options = {}) => {
      assertParamExists("casesPutOne", "objectId", objectId);
      assertParamExists("casesPutOne", "_case", _case);
      const localVarPath = `/v1/cases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(_case, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Array<Case>} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    casesPutSome: async (_case, options = {}) => {
      assertParamExists("casesPutSome", "_case", _case);
      const localVarPath = `/v1/cases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(_case, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("colsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsDeleteSome: async (ids, options = {}) => {
      assertParamExists("colsDeleteSome", "ids", ids);
      const localVarPath = `/v1/cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsGetAll: async (options = {}) => {
      const localVarPath = `/v1/cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsGetOne: async (objectId, options = {}) => {
      assertParamExists("colsGetOne", "objectId", objectId);
      const localVarPath = `/v1/cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsGetSome: async (ids, options = {}) => {
      assertParamExists("colsGetSome", "ids", ids);
      const localVarPath = `/v1/cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {Col} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPostOne: async (col, options = {}) => {
      assertParamExists("colsPostOne", "col", col);
      const localVarPath = `/v1/cols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(col, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPostQuery: async (filter, options = {}) => {
      assertParamExists("colsPostQuery", "filter", filter);
      const localVarPath = `/v1/cols/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("colsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/cols/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {Array<Col>} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPostSome: async (col, options = {}) => {
      assertParamExists("colsPostSome", "col", col);
      const localVarPath = `/v1/cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(col, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {string} objectId 
     * @param {Col} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPutOne: async (objectId, col, options = {}) => {
      assertParamExists("colsPutOne", "objectId", objectId);
      assertParamExists("colsPutOne", "col", col);
      const localVarPath = `/v1/cols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(col, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cols
     * @param {Array<Col>} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    colsPutSome: async (col, options = {}) => {
      assertParamExists("colsPutSome", "col", col);
      const localVarPath = `/v1/cols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(col, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Completecasetype
     * @param {string} caseTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeCaseTypesGetOne: async (caseTypeId, options = {}) => {
      assertParamExists("completeCaseTypesGetOne", "caseTypeId", caseTypeId);
      const localVarPath = `/v1/complete_case_types`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (caseTypeId !== void 0) {
        localVarQueryParameter["case_type_id"] = caseTypeId;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Caseset
     * @param {CreateCaseSetRequestBody} createCaseSetRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCaseSet: async (createCaseSetRequestBody, options = {}) => {
      assertParamExists("createCaseSet", "createCaseSetRequestBody", createCaseSetRequestBody);
      const localVarPath = `/v1/create/case_set`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createCaseSetRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Cases
     * @param {CreateCasesRequestBody} createCasesRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCases: async (createCasesRequestBody, options = {}) => {
      assertParamExists("createCases", "createCasesRequestBody", createCasesRequestBody);
      const localVarPath = `/v1/create/cases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createCasesRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/dims`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("dimsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/dims/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsDeleteSome: async (ids, options = {}) => {
      assertParamExists("dimsDeleteSome", "ids", ids);
      const localVarPath = `/v1/dims/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsGetAll: async (options = {}) => {
      const localVarPath = `/v1/dims`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsGetOne: async (objectId, options = {}) => {
      assertParamExists("dimsGetOne", "objectId", objectId);
      const localVarPath = `/v1/dims/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsGetSome: async (ids, options = {}) => {
      assertParamExists("dimsGetSome", "ids", ids);
      const localVarPath = `/v1/dims/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {Dim} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPostOne: async (dim, options = {}) => {
      assertParamExists("dimsPostOne", "dim", dim);
      const localVarPath = `/v1/dims`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dim, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPostQuery: async (filter, options = {}) => {
      assertParamExists("dimsPostQuery", "filter", filter);
      const localVarPath = `/v1/dims/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("dimsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/dims/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {Array<Dim>} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPostSome: async (dim, options = {}) => {
      assertParamExists("dimsPostSome", "dim", dim);
      const localVarPath = `/v1/dims/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dim, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {string} objectId 
     * @param {Dim} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPutOne: async (objectId, dim, options = {}) => {
      assertParamExists("dimsPutOne", "objectId", objectId);
      assertParamExists("dimsPutOne", "dim", dim);
      const localVarPath = `/v1/dims/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dim, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Dims
     * @param {Array<Dim>} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dimsPutSome: async (dim, options = {}) => {
      assertParamExists("dimsPutSome", "dim", dim);
      const localVarPath = `/v1/dims/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dim, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/genetic_distance_protocols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("geneticDistanceProtocolsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/genetic_distance_protocols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsDeleteSome: async (ids, options = {}) => {
      assertParamExists("geneticDistanceProtocolsDeleteSome", "ids", ids);
      const localVarPath = `/v1/genetic_distance_protocols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsGetAll: async (options = {}) => {
      const localVarPath = `/v1/genetic_distance_protocols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsGetOne: async (objectId, options = {}) => {
      assertParamExists("geneticDistanceProtocolsGetOne", "objectId", objectId);
      const localVarPath = `/v1/genetic_distance_protocols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsGetSome: async (ids, options = {}) => {
      assertParamExists("geneticDistanceProtocolsGetSome", "ids", ids);
      const localVarPath = `/v1/genetic_distance_protocols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPostOne: async (geneticDistanceProtocol, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPostOne", "geneticDistanceProtocol", geneticDistanceProtocol);
      const localVarPath = `/v1/genetic_distance_protocols`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(geneticDistanceProtocol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPostQuery: async (filter, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPostQuery", "filter", filter);
      const localVarPath = `/v1/genetic_distance_protocols/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/genetic_distance_protocols/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPostSome: async (geneticDistanceProtocol, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPostSome", "geneticDistanceProtocol", geneticDistanceProtocol);
      const localVarPath = `/v1/genetic_distance_protocols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(geneticDistanceProtocol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} objectId 
     * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPutOne: async (objectId, geneticDistanceProtocol, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPutOne", "objectId", objectId);
      assertParamExists("geneticDistanceProtocolsPutOne", "geneticDistanceProtocol", geneticDistanceProtocol);
      const localVarPath = `/v1/genetic_distance_protocols/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(geneticDistanceProtocol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geneticDistanceProtocolsPutSome: async (geneticDistanceProtocol, options = {}) => {
      assertParamExists("geneticDistanceProtocolsPutSome", "geneticDistanceProtocol", geneticDistanceProtocol);
      const localVarPath = `/v1/genetic_distance_protocols/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(geneticDistanceProtocol, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Case Ids By Query
     * @param {CaseQuery} caseQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCaseIdsByQuery: async (caseQuery, options = {}) => {
      assertParamExists("retrieveCaseIdsByQuery", "caseQuery", caseQuery);
      const localVarPath = `/v1/retrieve/case_ids_by_query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(caseQuery, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Case Rights
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCaseRights: async (requestBody, options = {}) => {
      assertParamExists("retrieveCaseRights", "requestBody", requestBody);
      const localVarPath = `/v1/retrieve/case_rights`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Case Set Rights
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCaseSetRights: async (requestBody, options = {}) => {
      assertParamExists("retrieveCaseSetRights", "requestBody", requestBody);
      const localVarPath = `/v1/retrieve/case_set_rights`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Casesetstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCaseSetStats: async (options = {}) => {
      const localVarPath = `/v1/retrieve/case_set_stats`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Casetypestats
     * @param {RetrieveCaseTypeStatsCommand} retrieveCaseTypeStatsCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCaseTypeStats: async (retrieveCaseTypeStatsCommand, options = {}) => {
      assertParamExists("retrieveCaseTypeStats", "retrieveCaseTypeStatsCommand", retrieveCaseTypeStatsCommand);
      const localVarPath = `/v1/retrieve/case_type_stats`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(retrieveCaseTypeStatsCommand, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Cases By Ids
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveCasesByIds: async (requestBody, options = {}) => {
      assertParamExists("retrieveCasesByIds", "requestBody", requestBody);
      const localVarPath = `/v1/retrieve/cases_by_ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Genetic Sequence
     * @param {RetrieveGeneticSequenceRequestBody} retrieveGeneticSequenceRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveGeneticSequence: async (retrieveGeneticSequenceRequestBody, options = {}) => {
      assertParamExists("retrieveGeneticSequence", "retrieveGeneticSequenceRequestBody", retrieveGeneticSequenceRequestBody);
      const localVarPath = `/v1/retrieve/genetic_sequence`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(retrieveGeneticSequenceRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Organization Contact
     * @param {RetrieveOrganizationContactRequestBody} retrieveOrganizationContactRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrganizationContact: async (retrieveOrganizationContactRequestBody, options = {}) => {
      assertParamExists("retrieveOrganizationContact", "retrieveOrganizationContactRequestBody", retrieveOrganizationContactRequestBody);
      const localVarPath = `/v1/retrieve/organization_contact`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(retrieveOrganizationContactRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieve  Phylogenetic Tree
     * @param {RetrievePhylogeneticTreeRequestBody} retrievePhylogeneticTreeRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrievePhylogeneticTree: async (retrievePhylogeneticTreeRequestBody, options = {}) => {
      assertParamExists("retrievePhylogeneticTree", "retrievePhylogeneticTreeRequestBody", retrievePhylogeneticTreeRequestBody);
      const localVarPath = `/v1/retrieve/phylogenetic_tree`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(retrievePhylogeneticTreeRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/tree_algorithm_classes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("treeAlgorithmClassesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/tree_algorithm_classes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesDeleteSome: async (ids, options = {}) => {
      assertParamExists("treeAlgorithmClassesDeleteSome", "ids", ids);
      const localVarPath = `/v1/tree_algorithm_classes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesGetAll: async (options = {}) => {
      const localVarPath = `/v1/tree_algorithm_classes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesGetOne: async (objectId, options = {}) => {
      assertParamExists("treeAlgorithmClassesGetOne", "objectId", objectId);
      const localVarPath = `/v1/tree_algorithm_classes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesGetSome: async (ids, options = {}) => {
      assertParamExists("treeAlgorithmClassesGetSome", "ids", ids);
      const localVarPath = `/v1/tree_algorithm_classes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {TreeAlgorithmClass} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPostOne: async (treeAlgorithmClass, options = {}) => {
      assertParamExists("treeAlgorithmClassesPostOne", "treeAlgorithmClass", treeAlgorithmClass);
      const localVarPath = `/v1/tree_algorithm_classes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithmClass, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPostQuery: async (filter, options = {}) => {
      assertParamExists("treeAlgorithmClassesPostQuery", "filter", filter);
      const localVarPath = `/v1/tree_algorithm_classes/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("treeAlgorithmClassesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/tree_algorithm_classes/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPostSome: async (treeAlgorithmClass, options = {}) => {
      assertParamExists("treeAlgorithmClassesPostSome", "treeAlgorithmClass", treeAlgorithmClass);
      const localVarPath = `/v1/tree_algorithm_classes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithmClass, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} objectId 
     * @param {TreeAlgorithmClass} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPutOne: async (objectId, treeAlgorithmClass, options = {}) => {
      assertParamExists("treeAlgorithmClassesPutOne", "objectId", objectId);
      assertParamExists("treeAlgorithmClassesPutOne", "treeAlgorithmClass", treeAlgorithmClass);
      const localVarPath = `/v1/tree_algorithm_classes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithmClass, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmClassesPutSome: async (treeAlgorithmClass, options = {}) => {
      assertParamExists("treeAlgorithmClassesPutSome", "treeAlgorithmClass", treeAlgorithmClass);
      const localVarPath = `/v1/tree_algorithm_classes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithmClass, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/tree_algorithms`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("treeAlgorithmsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/tree_algorithms/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsDeleteSome: async (ids, options = {}) => {
      assertParamExists("treeAlgorithmsDeleteSome", "ids", ids);
      const localVarPath = `/v1/tree_algorithms/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsGetAll: async (options = {}) => {
      const localVarPath = `/v1/tree_algorithms`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsGetOne: async (objectId, options = {}) => {
      assertParamExists("treeAlgorithmsGetOne", "objectId", objectId);
      const localVarPath = `/v1/tree_algorithms/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsGetSome: async (ids, options = {}) => {
      assertParamExists("treeAlgorithmsGetSome", "ids", ids);
      const localVarPath = `/v1/tree_algorithms/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {TreeAlgorithm} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPostOne: async (treeAlgorithm, options = {}) => {
      assertParamExists("treeAlgorithmsPostOne", "treeAlgorithm", treeAlgorithm);
      const localVarPath = `/v1/tree_algorithms`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithm, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPostQuery: async (filter, options = {}) => {
      assertParamExists("treeAlgorithmsPostQuery", "filter", filter);
      const localVarPath = `/v1/tree_algorithms/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("treeAlgorithmsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/tree_algorithms/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Array<TreeAlgorithm>} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPostSome: async (treeAlgorithm, options = {}) => {
      assertParamExists("treeAlgorithmsPostSome", "treeAlgorithm", treeAlgorithm);
      const localVarPath = `/v1/tree_algorithms/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithm, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} objectId 
     * @param {TreeAlgorithm} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPutOne: async (objectId, treeAlgorithm, options = {}) => {
      assertParamExists("treeAlgorithmsPutOne", "objectId", objectId);
      assertParamExists("treeAlgorithmsPutOne", "treeAlgorithm", treeAlgorithm);
      const localVarPath = `/v1/tree_algorithms/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithm, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Array<TreeAlgorithm>} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    treeAlgorithmsPutSome: async (treeAlgorithm, options = {}) => {
      assertParamExists("treeAlgorithmsPutSome", "treeAlgorithm", treeAlgorithm);
      const localVarPath = `/v1/tree_algorithms/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(treeAlgorithm, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const CaseApiFp = function(configuration) {
  const localVarAxiosParamCreator = CaseApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Case Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {CaseDataCollectionLink} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPostOne(caseDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPostOne(caseDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPostSome(caseDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPostSome(caseDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {string} objectId 
     * @param {CaseDataCollectionLink} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPutOne(objectId, caseDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPutOne(objectId, caseDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Data Collection Links
     * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseDataCollectionLinksPutSome(caseDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseDataCollectionLinksPutSome(caseDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {CaseSetCategory} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPostOne(caseSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPostOne(caseSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Array<CaseSetCategory>} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPostSome(caseSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPostSome(caseSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {string} objectId 
     * @param {CaseSetCategory} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPutOne(objectId, caseSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPutOne(objectId, caseSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Categories
     * @param {Array<CaseSetCategory>} caseSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetCategoriesPutSome(caseSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetCategoriesPutSome(caseSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPostOne(caseSetDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPostOne(caseSetDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPostSome(caseSetDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPostSome(caseSetDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {string} objectId 
     * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPutOne(objectId, caseSetDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPutOne(objectId, caseSetDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Data Collection Links
     * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetDataCollectionLinksPutSome(caseSetDataCollectionLink, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetDataCollectionLinksPutSome(caseSetDataCollectionLink, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {CaseSetMember} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPostOne(caseSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPostOne(caseSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Array<CaseSetMember>} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPostSome(caseSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPostSome(caseSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {string} objectId 
     * @param {CaseSetMember} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPutOne(objectId, caseSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPutOne(objectId, caseSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Members
     * @param {Array<CaseSetMember>} caseSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetMembersPutSome(caseSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetMembersPutSome(caseSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {CaseSetStatus} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPostOne(caseSetStatus, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPostOne(caseSetStatus, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Array<CaseSetStatus>} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPostSome(caseSetStatus, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPostSome(caseSetStatus, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {string} objectId 
     * @param {CaseSetStatus} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPutOne(objectId, caseSetStatus, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPutOne(objectId, caseSetStatus, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Set Statuses
     * @param {Array<CaseSetStatus>} caseSetStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetStatusesPutSome(caseSetStatus, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetStatusesPutSome(caseSetStatus, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {string} objectId 
     * @param {CaseSet} caseSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsPutOne(objectId, caseSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsPutOne(objectId, caseSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Sets
     * @param {Array<CaseSet>} caseSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseSetsPutSome(caseSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseSetsPutSome(caseSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {CaseTypeColSetMember} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPostOne(caseTypeColSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPostOne(caseTypeColSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPostSome(caseTypeColSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPostSome(caseTypeColSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {string} objectId 
     * @param {CaseTypeColSetMember} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPutOne(objectId, caseTypeColSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPutOne(objectId, caseTypeColSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Set Members
     * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetMembersPutSome(caseTypeColSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetMembersPutSome(caseTypeColSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {CaseTypeColSet} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPostOne(caseTypeColSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPostOne(caseTypeColSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Array<CaseTypeColSet>} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPostSome(caseTypeColSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPostSome(caseTypeColSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Casetypecolset Casetypecol
     * @param {string} caseTypeColSetId 
     * @param {UpdateCaseTypeColSetCaseTypeColsRequestBody} updateCaseTypeColSetCaseTypeColsRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPutCaseTypeCols(caseTypeColSetId, updateCaseTypeColSetCaseTypeColsRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPutCaseTypeCols(caseTypeColSetId, updateCaseTypeColSetCaseTypeColsRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {string} objectId 
     * @param {CaseTypeColSet} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPutOne(objectId, caseTypeColSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPutOne(objectId, caseTypeColSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Col Sets
     * @param {Array<CaseTypeColSet>} caseTypeColSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColSetsPutSome(caseTypeColSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColSetsPutSome(caseTypeColSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {CaseTypeCol} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPostOne(caseTypeCol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPostOne(caseTypeCol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Array<CaseTypeCol>} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPostSome(caseTypeCol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPostSome(caseTypeCol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {string} objectId 
     * @param {CaseTypeCol} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPutOne(objectId, caseTypeCol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPutOne(objectId, caseTypeCol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Cols
     * @param {Array<CaseTypeCol>} caseTypeCol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeColsPutSome(caseTypeCol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeColsPutSome(caseTypeCol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {CaseTypeSetCategory} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPostOne(caseTypeSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPostOne(caseTypeSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPostSome(caseTypeSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPostSome(caseTypeSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {string} objectId 
     * @param {CaseTypeSetCategory} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPutOne(objectId, caseTypeSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPutOne(objectId, caseTypeSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Categories
     * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetCategoriesPutSome(caseTypeSetCategory, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetCategoriesPutSome(caseTypeSetCategory, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {CaseTypeSetMember} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPostOne(caseTypeSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPostOne(caseTypeSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPostSome(caseTypeSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPostSome(caseTypeSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {string} objectId 
     * @param {CaseTypeSetMember} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPutOne(objectId, caseTypeSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPutOne(objectId, caseTypeSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Set Members
     * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetMembersPutSome(caseTypeSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetMembersPutSome(caseTypeSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {CaseTypeSet} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPostOne(caseTypeSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPostOne(caseTypeSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Array<CaseTypeSet>} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPostSome(caseTypeSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPostSome(caseTypeSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Casetypeset Casetype
     * @param {string} caseTypeSetId 
     * @param {UpdateCaseTypeSetCaseTypesRequestBody} updateCaseTypeSetCaseTypesRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPutCaseTypes(caseTypeSetId, updateCaseTypeSetCaseTypesRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPutCaseTypes(caseTypeSetId, updateCaseTypeSetCaseTypesRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {string} objectId 
     * @param {CaseTypeSet} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPutOne(objectId, caseTypeSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPutOne(objectId, caseTypeSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Type Sets
     * @param {Array<CaseTypeSet>} caseTypeSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypeSetsPutSome(caseTypeSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypeSetsPutSome(caseTypeSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {CaseType} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPostOne(caseType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPostOne(caseType, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {Array<CaseType>} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPostSome(caseType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPostSome(caseType, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {string} objectId 
     * @param {CaseType} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPutOne(objectId, caseType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPutOne(objectId, caseType, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Case Types
     * @param {Array<CaseType>} caseType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async caseTypesPutSome(caseType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.caseTypesPutSome(caseType, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Case} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPostOne(_case, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPostOne(_case, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Array<Case>} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPostSome(_case, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPostSome(_case, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {string} objectId 
     * @param {Case} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPutOne(objectId, _case, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPutOne(objectId, _case, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing a case.
     * @summary Cases
     * @param {Array<Case>} _case 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async casesPutSome(_case, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.casesPutSome(_case, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {Col} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPostOne(col, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPostOne(col, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {Array<Col>} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPostSome(col, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPostSome(col, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {string} objectId 
     * @param {Col} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPutOne(objectId, col, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPutOne(objectId, col, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cols
     * @param {Array<Col>} col 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async colsPutSome(col, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.colsPutSome(col, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Completecasetype
     * @param {string} caseTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async completeCaseTypesGetOne(caseTypeId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.completeCaseTypesGetOne(caseTypeId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Caseset
     * @param {CreateCaseSetRequestBody} createCaseSetRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCaseSet(createCaseSetRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCaseSet(createCaseSetRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Cases
     * @param {CreateCasesRequestBody} createCasesRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCases(createCasesRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCases(createCasesRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {Dim} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPostOne(dim, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPostOne(dim, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {Array<Dim>} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPostSome(dim, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPostSome(dim, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {string} objectId 
     * @param {Dim} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPutOne(objectId, dim, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPutOne(objectId, dim, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Dims
     * @param {Array<Dim>} dim 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dimsPutSome(dim, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dimsPutSome(dim, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPostOne(geneticDistanceProtocol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPostOne(geneticDistanceProtocol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPostSome(geneticDistanceProtocol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPostSome(geneticDistanceProtocol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {string} objectId 
     * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPutOne(objectId, geneticDistanceProtocol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPutOne(objectId, geneticDistanceProtocol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Genetic Distance Protocols
     * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async geneticDistanceProtocolsPutSome(geneticDistanceProtocol, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.geneticDistanceProtocolsPutSome(geneticDistanceProtocol, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Case Ids By Query
     * @param {CaseQuery} caseQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCaseIdsByQuery(caseQuery, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCaseIdsByQuery(caseQuery, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Case Rights
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCaseRights(requestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCaseRights(requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Case Set Rights
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCaseSetRights(requestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCaseSetRights(requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Casesetstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCaseSetStats(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCaseSetStats(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Casetypestats
     * @param {RetrieveCaseTypeStatsCommand} retrieveCaseTypeStatsCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCaseTypeStats(retrieveCaseTypeStatsCommand, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCaseTypeStats(retrieveCaseTypeStatsCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Cases By Ids
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveCasesByIds(requestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveCasesByIds(requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Genetic Sequence
     * @param {RetrieveGeneticSequenceRequestBody} retrieveGeneticSequenceRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveGeneticSequence(retrieveGeneticSequenceRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveGeneticSequence(retrieveGeneticSequenceRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Organization Contact
     * @param {RetrieveOrganizationContactRequestBody} retrieveOrganizationContactRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveOrganizationContact(retrieveOrganizationContactRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOrganizationContact(retrieveOrganizationContactRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieve  Phylogenetic Tree
     * @param {RetrievePhylogeneticTreeRequestBody} retrievePhylogeneticTreeRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrievePhylogeneticTree(retrievePhylogeneticTreeRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrievePhylogeneticTree(retrievePhylogeneticTreeRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {TreeAlgorithmClass} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPostOne(treeAlgorithmClass, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPostOne(treeAlgorithmClass, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPostSome(treeAlgorithmClass, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPostSome(treeAlgorithmClass, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {string} objectId 
     * @param {TreeAlgorithmClass} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPutOne(objectId, treeAlgorithmClass, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPutOne(objectId, treeAlgorithmClass, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Tree Algorithm Classes
     * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmClassesPutSome(treeAlgorithmClass, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmClassesPutSome(treeAlgorithmClass, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {TreeAlgorithm} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPostOne(treeAlgorithm, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPostOne(treeAlgorithm, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Array<TreeAlgorithm>} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPostSome(treeAlgorithm, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPostSome(treeAlgorithm, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {string} objectId 
     * @param {TreeAlgorithm} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPutOne(objectId, treeAlgorithm, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPutOne(objectId, treeAlgorithm, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
     * @summary Tree Algorithms
     * @param {Array<TreeAlgorithm>} treeAlgorithm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async treeAlgorithmsPutSome(treeAlgorithm, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.treeAlgorithmsPutSome(treeAlgorithm, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _CaseApi = class _CaseApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _CaseApi();
    return this.instance;
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksDeleteAll(options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksGetAll(options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {CaseDataCollectionLink} caseDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPostOne(caseDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPostOne(caseDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPostSome(caseDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPostSome(caseDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {string} objectId 
   * @param {CaseDataCollectionLink} caseDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPutOne(objectId, caseDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPutOne(objectId, caseDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Data Collection Links
   * @param {Array<CaseDataCollectionLink>} caseDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseDataCollectionLinksPutSome(caseDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseDataCollectionLinksPutSome(caseDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesDeleteAll(options) {
    return CaseApiFp(this.configuration).caseSetCategoriesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesGetAll(options) {
    return CaseApiFp(this.configuration).caseSetCategoriesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {CaseSetCategory} caseSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPostOne(caseSetCategory, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPostOne(caseSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {Array<CaseSetCategory>} caseSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPostSome(caseSetCategory, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPostSome(caseSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {string} objectId 
   * @param {CaseSetCategory} caseSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPutOne(objectId, caseSetCategory, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPutOne(objectId, caseSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Categories
   * @param {Array<CaseSetCategory>} caseSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetCategoriesPutSome(caseSetCategory, options) {
    return CaseApiFp(this.configuration).caseSetCategoriesPutSome(caseSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksDeleteAll(options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksGetAll(options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPostOne(caseSetDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPostOne(caseSetDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPostSome(caseSetDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPostSome(caseSetDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {string} objectId 
   * @param {CaseSetDataCollectionLink} caseSetDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPutOne(objectId, caseSetDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPutOne(objectId, caseSetDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Data Collection Links
   * @param {Array<CaseSetDataCollectionLink>} caseSetDataCollectionLink 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetDataCollectionLinksPutSome(caseSetDataCollectionLink, options) {
    return CaseApiFp(this.configuration).caseSetDataCollectionLinksPutSome(caseSetDataCollectionLink, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersDeleteAll(options) {
    return CaseApiFp(this.configuration).caseSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersGetAll(options) {
    return CaseApiFp(this.configuration).caseSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {CaseSetMember} caseSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPostOne(caseSetMember, options) {
    return CaseApiFp(this.configuration).caseSetMembersPostOne(caseSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {Array<CaseSetMember>} caseSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPostSome(caseSetMember, options) {
    return CaseApiFp(this.configuration).caseSetMembersPostSome(caseSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {string} objectId 
   * @param {CaseSetMember} caseSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPutOne(objectId, caseSetMember, options) {
    return CaseApiFp(this.configuration).caseSetMembersPutOne(objectId, caseSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Members
   * @param {Array<CaseSetMember>} caseSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetMembersPutSome(caseSetMember, options) {
    return CaseApiFp(this.configuration).caseSetMembersPutSome(caseSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesDeleteAll(options) {
    return CaseApiFp(this.configuration).caseSetStatusesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetStatusesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetStatusesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesGetAll(options) {
    return CaseApiFp(this.configuration).caseSetStatusesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetStatusesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetStatusesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {CaseSetStatus} caseSetStatus 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPostOne(caseSetStatus, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPostOne(caseSetStatus, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {Array<CaseSetStatus>} caseSetStatus 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPostSome(caseSetStatus, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPostSome(caseSetStatus, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {string} objectId 
   * @param {CaseSetStatus} caseSetStatus 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPutOne(objectId, caseSetStatus, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPutOne(objectId, caseSetStatus, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Set Statuses
   * @param {Array<CaseSetStatus>} caseSetStatus 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetStatusesPutSome(caseSetStatus, options) {
    return CaseApiFp(this.configuration).caseSetStatusesPutSome(caseSetStatus, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsDeleteAll(options) {
    return CaseApiFp(this.configuration).caseSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsGetAll(options) {
    return CaseApiFp(this.configuration).caseSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {string} objectId 
   * @param {CaseSet} caseSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsPutOne(objectId, caseSet, options) {
    return CaseApiFp(this.configuration).caseSetsPutOne(objectId, caseSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Sets
   * @param {Array<CaseSet>} caseSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseSetsPutSome(caseSet, options) {
    return CaseApiFp(this.configuration).caseSetsPutSome(caseSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {CaseTypeColSetMember} caseTypeColSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPostOne(caseTypeColSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPostOne(caseTypeColSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPostSome(caseTypeColSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPostSome(caseTypeColSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {string} objectId 
   * @param {CaseTypeColSetMember} caseTypeColSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPutOne(objectId, caseTypeColSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPutOne(objectId, caseTypeColSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Set Members
   * @param {Array<CaseTypeColSetMember>} caseTypeColSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetMembersPutSome(caseTypeColSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeColSetMembersPutSome(caseTypeColSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeColSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeColSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {CaseTypeColSet} caseTypeColSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPostOne(caseTypeColSet, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPostOne(caseTypeColSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {Array<CaseTypeColSet>} caseTypeColSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPostSome(caseTypeColSet, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPostSome(caseTypeColSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Casetypecolset Casetypecol
   * @param {string} caseTypeColSetId 
   * @param {UpdateCaseTypeColSetCaseTypeColsRequestBody} updateCaseTypeColSetCaseTypeColsRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPutCaseTypeCols(caseTypeColSetId, updateCaseTypeColSetCaseTypeColsRequestBody, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPutCaseTypeCols(caseTypeColSetId, updateCaseTypeColSetCaseTypeColsRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {string} objectId 
   * @param {CaseTypeColSet} caseTypeColSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPutOne(objectId, caseTypeColSet, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPutOne(objectId, caseTypeColSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Col Sets
   * @param {Array<CaseTypeColSet>} caseTypeColSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColSetsPutSome(caseTypeColSet, options) {
    return CaseApiFp(this.configuration).caseTypeColSetsPutSome(caseTypeColSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeColsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeColsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeColsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeColsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {CaseTypeCol} caseTypeCol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPostOne(caseTypeCol, options) {
    return CaseApiFp(this.configuration).caseTypeColsPostOne(caseTypeCol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeColsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {Array<CaseTypeCol>} caseTypeCol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPostSome(caseTypeCol, options) {
    return CaseApiFp(this.configuration).caseTypeColsPostSome(caseTypeCol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {string} objectId 
   * @param {CaseTypeCol} caseTypeCol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPutOne(objectId, caseTypeCol, options) {
    return CaseApiFp(this.configuration).caseTypeColsPutOne(objectId, caseTypeCol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Cols
   * @param {Array<CaseTypeCol>} caseTypeCol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeColsPutSome(caseTypeCol, options) {
    return CaseApiFp(this.configuration).caseTypeColsPutSome(caseTypeCol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {CaseTypeSetCategory} caseTypeSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPostOne(caseTypeSetCategory, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPostOne(caseTypeSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPostSome(caseTypeSetCategory, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPostSome(caseTypeSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {string} objectId 
   * @param {CaseTypeSetCategory} caseTypeSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPutOne(objectId, caseTypeSetCategory, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPutOne(objectId, caseTypeSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Categories
   * @param {Array<CaseTypeSetCategory>} caseTypeSetCategory 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetCategoriesPutSome(caseTypeSetCategory, options) {
    return CaseApiFp(this.configuration).caseTypeSetCategoriesPutSome(caseTypeSetCategory, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {CaseTypeSetMember} caseTypeSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPostOne(caseTypeSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPostOne(caseTypeSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPostSome(caseTypeSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPostSome(caseTypeSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {string} objectId 
   * @param {CaseTypeSetMember} caseTypeSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPutOne(objectId, caseTypeSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPutOne(objectId, caseTypeSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Set Members
   * @param {Array<CaseTypeSetMember>} caseTypeSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetMembersPutSome(caseTypeSetMember, options) {
    return CaseApiFp(this.configuration).caseTypeSetMembersPutSome(caseTypeSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsGetAll(options) {
    return CaseApiFp(this.configuration).caseTypeSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypeSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypeSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {CaseTypeSet} caseTypeSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPostOne(caseTypeSet, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPostOne(caseTypeSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {Array<CaseTypeSet>} caseTypeSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPostSome(caseTypeSet, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPostSome(caseTypeSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Casetypeset Casetype
   * @param {string} caseTypeSetId 
   * @param {UpdateCaseTypeSetCaseTypesRequestBody} updateCaseTypeSetCaseTypesRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPutCaseTypes(caseTypeSetId, updateCaseTypeSetCaseTypesRequestBody, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPutCaseTypes(caseTypeSetId, updateCaseTypeSetCaseTypesRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {string} objectId 
   * @param {CaseTypeSet} caseTypeSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPutOne(objectId, caseTypeSet, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPutOne(objectId, caseTypeSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Type Sets
   * @param {Array<CaseTypeSet>} caseTypeSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypeSetsPutSome(caseTypeSet, options) {
    return CaseApiFp(this.configuration).caseTypeSetsPutSome(caseTypeSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesDeleteAll(options) {
    return CaseApiFp(this.configuration).caseTypesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesGetAll(options) {
    return CaseApiFp(this.configuration).caseTypesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).caseTypesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesGetSome(ids, options) {
    return CaseApiFp(this.configuration).caseTypesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {CaseType} caseType 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPostOne(caseType, options) {
    return CaseApiFp(this.configuration).caseTypesPostOne(caseType, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).caseTypesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).caseTypesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {Array<CaseType>} caseType 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPostSome(caseType, options) {
    return CaseApiFp(this.configuration).caseTypesPostSome(caseType, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {string} objectId 
   * @param {CaseType} caseType 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPutOne(objectId, caseType, options) {
    return CaseApiFp(this.configuration).caseTypesPutOne(objectId, caseType, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Case Types
   * @param {Array<CaseType>} caseType 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  caseTypesPutSome(caseType, options) {
    return CaseApiFp(this.configuration).caseTypesPutSome(caseType, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesDeleteAll(options) {
    return CaseApiFp(this.configuration).casesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).casesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).casesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesGetAll(options) {
    return CaseApiFp(this.configuration).casesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).casesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesGetSome(ids, options) {
    return CaseApiFp(this.configuration).casesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {Case} _case 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPostOne(_case, options) {
    return CaseApiFp(this.configuration).casesPostOne(_case, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).casesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).casesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {Array<Case>} _case 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPostSome(_case, options) {
    return CaseApiFp(this.configuration).casesPostSome(_case, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {string} objectId 
   * @param {Case} _case 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPutOne(objectId, _case, options) {
    return CaseApiFp(this.configuration).casesPutOne(objectId, _case, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing a case.
   * @summary Cases
   * @param {Array<Case>} _case 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  casesPutSome(_case, options) {
    return CaseApiFp(this.configuration).casesPutSome(_case, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsDeleteAll(options) {
    return CaseApiFp(this.configuration).colsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).colsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).colsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsGetAll(options) {
    return CaseApiFp(this.configuration).colsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).colsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsGetSome(ids, options) {
    return CaseApiFp(this.configuration).colsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {Col} col 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPostOne(col, options) {
    return CaseApiFp(this.configuration).colsPostOne(col, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).colsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).colsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {Array<Col>} col 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPostSome(col, options) {
    return CaseApiFp(this.configuration).colsPostSome(col, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {string} objectId 
   * @param {Col} col 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPutOne(objectId, col, options) {
    return CaseApiFp(this.configuration).colsPutOne(objectId, col, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cols
   * @param {Array<Col>} col 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  colsPutSome(col, options) {
    return CaseApiFp(this.configuration).colsPutSome(col, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Completecasetype
   * @param {string} caseTypeId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  completeCaseTypesGetOne(caseTypeId, options) {
    return CaseApiFp(this.configuration).completeCaseTypesGetOne(caseTypeId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Caseset
   * @param {CreateCaseSetRequestBody} createCaseSetRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  createCaseSet(createCaseSetRequestBody, options) {
    return CaseApiFp(this.configuration).createCaseSet(createCaseSetRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Cases
   * @param {CreateCasesRequestBody} createCasesRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  createCases(createCasesRequestBody, options) {
    return CaseApiFp(this.configuration).createCases(createCasesRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsDeleteAll(options) {
    return CaseApiFp(this.configuration).dimsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).dimsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).dimsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsGetAll(options) {
    return CaseApiFp(this.configuration).dimsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).dimsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsGetSome(ids, options) {
    return CaseApiFp(this.configuration).dimsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {Dim} dim 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPostOne(dim, options) {
    return CaseApiFp(this.configuration).dimsPostOne(dim, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).dimsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).dimsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {Array<Dim>} dim 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPostSome(dim, options) {
    return CaseApiFp(this.configuration).dimsPostSome(dim, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {string} objectId 
   * @param {Dim} dim 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPutOne(objectId, dim, options) {
    return CaseApiFp(this.configuration).dimsPutOne(objectId, dim, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Dims
   * @param {Array<Dim>} dim 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  dimsPutSome(dim, options) {
    return CaseApiFp(this.configuration).dimsPutSome(dim, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsDeleteAll(options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsGetAll(options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsGetSome(ids, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPostOne(geneticDistanceProtocol, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPostOne(geneticDistanceProtocol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPostSome(geneticDistanceProtocol, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPostSome(geneticDistanceProtocol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {string} objectId 
   * @param {GeneticDistanceProtocol} geneticDistanceProtocol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPutOne(objectId, geneticDistanceProtocol, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPutOne(objectId, geneticDistanceProtocol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Genetic Distance Protocols
   * @param {Array<GeneticDistanceProtocol>} geneticDistanceProtocol 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  geneticDistanceProtocolsPutSome(geneticDistanceProtocol, options) {
    return CaseApiFp(this.configuration).geneticDistanceProtocolsPutSome(geneticDistanceProtocol, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Case Ids By Query
   * @param {CaseQuery} caseQuery 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCaseIdsByQuery(caseQuery, options) {
    return CaseApiFp(this.configuration).retrieveCaseIdsByQuery(caseQuery, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Case Rights
   * @param {Array<string>} requestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCaseRights(requestBody, options) {
    return CaseApiFp(this.configuration).retrieveCaseRights(requestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Case Set Rights
   * @param {Array<string>} requestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCaseSetRights(requestBody, options) {
    return CaseApiFp(this.configuration).retrieveCaseSetRights(requestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Casesetstats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCaseSetStats(options) {
    return CaseApiFp(this.configuration).retrieveCaseSetStats(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Casetypestats
   * @param {RetrieveCaseTypeStatsCommand} retrieveCaseTypeStatsCommand 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCaseTypeStats(retrieveCaseTypeStatsCommand, options) {
    return CaseApiFp(this.configuration).retrieveCaseTypeStats(retrieveCaseTypeStatsCommand, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Cases By Ids
   * @param {Array<string>} requestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveCasesByIds(requestBody, options) {
    return CaseApiFp(this.configuration).retrieveCasesByIds(requestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Genetic Sequence
   * @param {RetrieveGeneticSequenceRequestBody} retrieveGeneticSequenceRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveGeneticSequence(retrieveGeneticSequenceRequestBody, options) {
    return CaseApiFp(this.configuration).retrieveGeneticSequence(retrieveGeneticSequenceRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Organization Contact
   * @param {RetrieveOrganizationContactRequestBody} retrieveOrganizationContactRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrieveOrganizationContact(retrieveOrganizationContactRequestBody, options) {
    return CaseApiFp(this.configuration).retrieveOrganizationContact(retrieveOrganizationContactRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieve  Phylogenetic Tree
   * @param {RetrievePhylogeneticTreeRequestBody} retrievePhylogeneticTreeRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  retrievePhylogeneticTree(retrievePhylogeneticTreeRequestBody, options) {
    return CaseApiFp(this.configuration).retrievePhylogeneticTree(retrievePhylogeneticTreeRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesDeleteAll(options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesGetAll(options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesGetOne(objectId, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesGetSome(ids, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {TreeAlgorithmClass} treeAlgorithmClass 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPostOne(treeAlgorithmClass, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPostOne(treeAlgorithmClass, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPostQuery(filter, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPostSome(treeAlgorithmClass, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPostSome(treeAlgorithmClass, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {string} objectId 
   * @param {TreeAlgorithmClass} treeAlgorithmClass 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPutOne(objectId, treeAlgorithmClass, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPutOne(objectId, treeAlgorithmClass, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Tree Algorithm Classes
   * @param {Array<TreeAlgorithmClass>} treeAlgorithmClass 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmClassesPutSome(treeAlgorithmClass, options) {
    return CaseApiFp(this.configuration).treeAlgorithmClassesPutSome(treeAlgorithmClass, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsDeleteAll(options) {
    return CaseApiFp(this.configuration).treeAlgorithmsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsDeleteOne(objectId, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsDeleteSome(ids, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsGetAll(options) {
    return CaseApiFp(this.configuration).treeAlgorithmsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsGetOne(objectId, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsGetSome(ids, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {TreeAlgorithm} treeAlgorithm 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPostOne(treeAlgorithm, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPostOne(treeAlgorithm, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPostQuery(filter, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPostQueryIds(filter, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {Array<TreeAlgorithm>} treeAlgorithm 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPostSome(treeAlgorithm, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPostSome(treeAlgorithm, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {string} objectId 
   * @param {TreeAlgorithm} treeAlgorithm 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPutOne(objectId, treeAlgorithm, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPutOne(objectId, treeAlgorithm, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * See https://en.wikipedia.org/wiki/Hierarchical_clustering,     https://en.wikipedia.org/wiki/Neighbor_joining,      https://en.wikipedia.org/wiki/Computational_phylogenetics,      https://en.wikipedia.org/wiki/Spanning_tree
   * @summary Tree Algorithms
   * @param {Array<TreeAlgorithm>} treeAlgorithm 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaseApi
   */
  treeAlgorithmsPutSome(treeAlgorithm, options) {
    return CaseApiFp(this.configuration).treeAlgorithmsPutSome(treeAlgorithm, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_CaseApi, "instance");
let CaseApi = _CaseApi;
const DefaultApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Redirect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redirectGet: async (options = {}) => {
      const localVarPath = `/`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const DefaultApiFp = function(configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Redirect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async redirectGet(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.redirectGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _DefaultApi = class _DefaultApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _DefaultApi();
    return this.instance;
  }
  /**
   * 
   * @summary Redirect
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  redirectGet(options) {
    return DefaultApiFp(this.configuration).redirectGet(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_DefaultApi, "instance");
let DefaultApi = _DefaultApi;
const GeoApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Region Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/region_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("regionRelationsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/region_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsDeleteSome: async (ids, options = {}) => {
      assertParamExists("regionRelationsDeleteSome", "ids", ids);
      const localVarPath = `/v1/region_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsGetAll: async (options = {}) => {
      const localVarPath = `/v1/region_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsGetOne: async (objectId, options = {}) => {
      assertParamExists("regionRelationsGetOne", "objectId", objectId);
      const localVarPath = `/v1/region_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsGetSome: async (ids, options = {}) => {
      assertParamExists("regionRelationsGetSome", "ids", ids);
      const localVarPath = `/v1/region_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {RegionRelation} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPostOne: async (regionRelation, options = {}) => {
      assertParamExists("regionRelationsPostOne", "regionRelation", regionRelation);
      const localVarPath = `/v1/region_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPostQuery: async (filter, options = {}) => {
      assertParamExists("regionRelationsPostQuery", "filter", filter);
      const localVarPath = `/v1/region_relations/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("regionRelationsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/region_relations/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {Array<RegionRelation>} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPostSome: async (regionRelation, options = {}) => {
      assertParamExists("regionRelationsPostSome", "regionRelation", regionRelation);
      const localVarPath = `/v1/region_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} objectId 
     * @param {RegionRelation} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPutOne: async (objectId, regionRelation, options = {}) => {
      assertParamExists("regionRelationsPutOne", "objectId", objectId);
      assertParamExists("regionRelationsPutOne", "regionRelation", regionRelation);
      const localVarPath = `/v1/region_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Relations
     * @param {Array<RegionRelation>} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionRelationsPutSome: async (regionRelation, options = {}) => {
      assertParamExists("regionRelationsPutSome", "regionRelation", regionRelation);
      const localVarPath = `/v1/region_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/region_set_shapes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("regionSetShapesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/region_set_shapes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesDeleteSome: async (ids, options = {}) => {
      assertParamExists("regionSetShapesDeleteSome", "ids", ids);
      const localVarPath = `/v1/region_set_shapes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesGetAll: async (options = {}) => {
      const localVarPath = `/v1/region_set_shapes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesGetOne: async (objectId, options = {}) => {
      assertParamExists("regionSetShapesGetOne", "objectId", objectId);
      const localVarPath = `/v1/region_set_shapes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesGetSome: async (ids, options = {}) => {
      assertParamExists("regionSetShapesGetSome", "ids", ids);
      const localVarPath = `/v1/region_set_shapes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {RegionSetShape} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPostOne: async (regionSetShape, options = {}) => {
      assertParamExists("regionSetShapesPostOne", "regionSetShape", regionSetShape);
      const localVarPath = `/v1/region_set_shapes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSetShape, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPostQuery: async (filter, options = {}) => {
      assertParamExists("regionSetShapesPostQuery", "filter", filter);
      const localVarPath = `/v1/region_set_shapes/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("regionSetShapesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/region_set_shapes/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Array<RegionSetShape>} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPostSome: async (regionSetShape, options = {}) => {
      assertParamExists("regionSetShapesPostSome", "regionSetShape", regionSetShape);
      const localVarPath = `/v1/region_set_shapes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSetShape, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} objectId 
     * @param {RegionSetShape} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPutOne: async (objectId, regionSetShape, options = {}) => {
      assertParamExists("regionSetShapesPutOne", "objectId", objectId);
      assertParamExists("regionSetShapesPutOne", "regionSetShape", regionSetShape);
      const localVarPath = `/v1/region_set_shapes/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSetShape, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Array<RegionSetShape>} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetShapesPutSome: async (regionSetShape, options = {}) => {
      assertParamExists("regionSetShapesPutSome", "regionSetShape", regionSetShape);
      const localVarPath = `/v1/region_set_shapes/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSetShape, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/region_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("regionSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/region_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("regionSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/region_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/region_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("regionSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/region_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsGetSome: async (ids, options = {}) => {
      assertParamExists("regionSetsGetSome", "ids", ids);
      const localVarPath = `/v1/region_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {RegionSet} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPostOne: async (regionSet, options = {}) => {
      assertParamExists("regionSetsPostOne", "regionSet", regionSet);
      const localVarPath = `/v1/region_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("regionSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/region_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("regionSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/region_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Array<RegionSet>} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPostSome: async (regionSet, options = {}) => {
      assertParamExists("regionSetsPostSome", "regionSet", regionSet);
      const localVarPath = `/v1/region_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} objectId 
     * @param {RegionSet} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPutOne: async (objectId, regionSet, options = {}) => {
      assertParamExists("regionSetsPutOne", "objectId", objectId);
      assertParamExists("regionSetsPutOne", "regionSet", regionSet);
      const localVarPath = `/v1/region_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Array<RegionSet>} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionSetsPutSome: async (regionSet, options = {}) => {
      assertParamExists("regionSetsPutSome", "regionSet", regionSet);
      const localVarPath = `/v1/region_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(regionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/regions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("regionsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/regions/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsDeleteSome: async (ids, options = {}) => {
      assertParamExists("regionsDeleteSome", "ids", ids);
      const localVarPath = `/v1/regions/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGetAll: async (options = {}) => {
      const localVarPath = `/v1/regions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGetOne: async (objectId, options = {}) => {
      assertParamExists("regionsGetOne", "objectId", objectId);
      const localVarPath = `/v1/regions/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGetSome: async (ids, options = {}) => {
      assertParamExists("regionsGetSome", "ids", ids);
      const localVarPath = `/v1/regions/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPostOne: async (region, options = {}) => {
      assertParamExists("regionsPostOne", "region", region);
      const localVarPath = `/v1/regions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPostQuery: async (filter, options = {}) => {
      assertParamExists("regionsPostQuery", "filter", filter);
      const localVarPath = `/v1/regions/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("regionsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/regions/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {Array<Region>} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPostSome: async (region, options = {}) => {
      assertParamExists("regionsPostSome", "region", region);
      const localVarPath = `/v1/regions/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {string} objectId 
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPutOne: async (objectId, region, options = {}) => {
      assertParamExists("regionsPutOne", "objectId", objectId);
      assertParamExists("regionsPutOne", "region", region);
      const localVarPath = `/v1/regions/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Regions
     * @param {Array<Region>} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPutSome: async (region, options = {}) => {
      assertParamExists("regionsPutSome", "region", region);
      const localVarPath = `/v1/regions/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(region, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const GeoApiFp = function(configuration) {
  const localVarAxiosParamCreator = GeoApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Region Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {RegionRelation} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPostOne(regionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPostOne(regionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {Array<RegionRelation>} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPostSome(regionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPostSome(regionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {string} objectId 
     * @param {RegionRelation} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPutOne(objectId, regionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPutOne(objectId, regionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Relations
     * @param {Array<RegionRelation>} regionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionRelationsPutSome(regionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionRelationsPutSome(regionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {RegionSetShape} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPostOne(regionSetShape, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPostOne(regionSetShape, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Array<RegionSetShape>} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPostSome(regionSetShape, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPostSome(regionSetShape, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {string} objectId 
     * @param {RegionSetShape} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPutOne(objectId, regionSetShape, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPutOne(objectId, regionSetShape, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Region Set Shapes
     * @param {Array<RegionSetShape>} regionSetShape 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetShapesPutSome(regionSetShape, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetShapesPutSome(regionSetShape, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {RegionSet} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPostOne(regionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPostOne(regionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Array<RegionSet>} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPostSome(regionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPostSome(regionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {string} objectId 
     * @param {RegionSet} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPutOne(objectId, regionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPutOne(objectId, regionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
     * @summary Region Sets
     * @param {Array<RegionSet>} regionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionSetsPutSome(regionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionSetsPutSome(regionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPostOne(region, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPostOne(region, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {Array<Region>} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPostSome(region, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPostSome(region, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {string} objectId 
     * @param {Region} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPutOne(objectId, region, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPutOne(objectId, region, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Regions
     * @param {Array<Region>} region 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regionsPutSome(region, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regionsPutSome(region, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _GeoApi = class _GeoApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _GeoApi();
    return this.instance;
  }
  /**
   * 
   * @summary Region Relations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsDeleteAll(options) {
    return GeoApiFp(this.configuration).regionRelationsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsDeleteOne(objectId, options) {
    return GeoApiFp(this.configuration).regionRelationsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsDeleteSome(ids, options) {
    return GeoApiFp(this.configuration).regionRelationsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsGetAll(options) {
    return GeoApiFp(this.configuration).regionRelationsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsGetOne(objectId, options) {
    return GeoApiFp(this.configuration).regionRelationsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsGetSome(ids, options) {
    return GeoApiFp(this.configuration).regionRelationsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {RegionRelation} regionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPostOne(regionRelation, options) {
    return GeoApiFp(this.configuration).regionRelationsPostOne(regionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPostQuery(filter, options) {
    return GeoApiFp(this.configuration).regionRelationsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPostQueryIds(filter, options) {
    return GeoApiFp(this.configuration).regionRelationsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {Array<RegionRelation>} regionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPostSome(regionRelation, options) {
    return GeoApiFp(this.configuration).regionRelationsPostSome(regionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {string} objectId 
   * @param {RegionRelation} regionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPutOne(objectId, regionRelation, options) {
    return GeoApiFp(this.configuration).regionRelationsPutOne(objectId, regionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Relations
   * @param {Array<RegionRelation>} regionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionRelationsPutSome(regionRelation, options) {
    return GeoApiFp(this.configuration).regionRelationsPutSome(regionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesDeleteAll(options) {
    return GeoApiFp(this.configuration).regionSetShapesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesDeleteOne(objectId, options) {
    return GeoApiFp(this.configuration).regionSetShapesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesDeleteSome(ids, options) {
    return GeoApiFp(this.configuration).regionSetShapesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesGetAll(options) {
    return GeoApiFp(this.configuration).regionSetShapesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesGetOne(objectId, options) {
    return GeoApiFp(this.configuration).regionSetShapesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesGetSome(ids, options) {
    return GeoApiFp(this.configuration).regionSetShapesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {RegionSetShape} regionSetShape 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPostOne(regionSetShape, options) {
    return GeoApiFp(this.configuration).regionSetShapesPostOne(regionSetShape, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPostQuery(filter, options) {
    return GeoApiFp(this.configuration).regionSetShapesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPostQueryIds(filter, options) {
    return GeoApiFp(this.configuration).regionSetShapesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {Array<RegionSetShape>} regionSetShape 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPostSome(regionSetShape, options) {
    return GeoApiFp(this.configuration).regionSetShapesPostSome(regionSetShape, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {string} objectId 
   * @param {RegionSetShape} regionSetShape 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPutOne(objectId, regionSetShape, options) {
    return GeoApiFp(this.configuration).regionSetShapesPutOne(objectId, regionSetShape, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Region Set Shapes
   * @param {Array<RegionSetShape>} regionSetShape 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetShapesPutSome(regionSetShape, options) {
    return GeoApiFp(this.configuration).regionSetShapesPutSome(regionSetShape, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsDeleteAll(options) {
    return GeoApiFp(this.configuration).regionSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsDeleteOne(objectId, options) {
    return GeoApiFp(this.configuration).regionSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsDeleteSome(ids, options) {
    return GeoApiFp(this.configuration).regionSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsGetAll(options) {
    return GeoApiFp(this.configuration).regionSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsGetOne(objectId, options) {
    return GeoApiFp(this.configuration).regionSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsGetSome(ids, options) {
    return GeoApiFp(this.configuration).regionSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {RegionSet} regionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPostOne(regionSet, options) {
    return GeoApiFp(this.configuration).regionSetsPostOne(regionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPostQuery(filter, options) {
    return GeoApiFp(this.configuration).regionSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPostQueryIds(filter, options) {
    return GeoApiFp(this.configuration).regionSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {Array<RegionSet>} regionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPostSome(regionSet, options) {
    return GeoApiFp(this.configuration).regionSetsPostSome(regionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {string} objectId 
   * @param {RegionSet} regionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPutOne(objectId, regionSet, options) {
    return GeoApiFp(this.configuration).regionSetsPutOne(objectId, regionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Set of regions that do not overlap geographically     or otherwise did not exist at the same moment in time.
   * @summary Region Sets
   * @param {Array<RegionSet>} regionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionSetsPutSome(regionSet, options) {
    return GeoApiFp(this.configuration).regionSetsPutSome(regionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsDeleteAll(options) {
    return GeoApiFp(this.configuration).regionsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsDeleteOne(objectId, options) {
    return GeoApiFp(this.configuration).regionsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsDeleteSome(ids, options) {
    return GeoApiFp(this.configuration).regionsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsGetAll(options) {
    return GeoApiFp(this.configuration).regionsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsGetOne(objectId, options) {
    return GeoApiFp(this.configuration).regionsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsGetSome(ids, options) {
    return GeoApiFp(this.configuration).regionsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {Region} region 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPostOne(region, options) {
    return GeoApiFp(this.configuration).regionsPostOne(region, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPostQuery(filter, options) {
    return GeoApiFp(this.configuration).regionsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPostQueryIds(filter, options) {
    return GeoApiFp(this.configuration).regionsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {Array<Region>} region 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPostSome(region, options) {
    return GeoApiFp(this.configuration).regionsPostSome(region, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {string} objectId 
   * @param {Region} region 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPutOne(objectId, region, options) {
    return GeoApiFp(this.configuration).regionsPutOne(objectId, region, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Regions
   * @param {Array<Region>} region 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GeoApi
   */
  regionsPutSome(region, options) {
    return GeoApiFp(this.configuration).regionsPutSome(region, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_GeoApi, "instance");
let GeoApi = _GeoApi;
const OntologyApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Concept Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/concept_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("conceptSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/concept_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("conceptSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/concept_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/concept_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("conceptSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/concept_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("conceptSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/concept_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {ConceptSetMember} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPostOne: async (conceptSetMember, options = {}) => {
      assertParamExists("conceptSetMembersPostOne", "conceptSetMember", conceptSetMember);
      const localVarPath = `/v1/concept_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("conceptSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/concept_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("conceptSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/concept_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Array<ConceptSetMember>} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPostSome: async (conceptSetMember, options = {}) => {
      assertParamExists("conceptSetMembersPostSome", "conceptSetMember", conceptSetMember);
      const localVarPath = `/v1/concept_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} objectId 
     * @param {ConceptSetMember} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPutOne: async (objectId, conceptSetMember, options = {}) => {
      assertParamExists("conceptSetMembersPutOne", "objectId", objectId);
      assertParamExists("conceptSetMembersPutOne", "conceptSetMember", conceptSetMember);
      const localVarPath = `/v1/concept_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Array<ConceptSetMember>} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetMembersPutSome: async (conceptSetMember, options = {}) => {
      assertParamExists("conceptSetMembersPutSome", "conceptSetMember", conceptSetMember);
      const localVarPath = `/v1/concept_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/concept_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("conceptSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/concept_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("conceptSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/concept_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/concept_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("conceptSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/concept_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsGetSome: async (ids, options = {}) => {
      assertParamExists("conceptSetsGetSome", "ids", ids);
      const localVarPath = `/v1/concept_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {ConceptSet} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPostOne: async (conceptSet, options = {}) => {
      assertParamExists("conceptSetsPostOne", "conceptSet", conceptSet);
      const localVarPath = `/v1/concept_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("conceptSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/concept_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("conceptSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/concept_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Array<ConceptSet>} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPostSome: async (conceptSet, options = {}) => {
      assertParamExists("conceptSetsPostSome", "conceptSet", conceptSet);
      const localVarPath = `/v1/concept_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Conceptset Concept
     * @param {string} conceptSetId 
     * @param {UpdateConceptSetConceptRequestBody} updateConceptSetConceptRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPutConcepts: async (conceptSetId, updateConceptSetConceptRequestBody, options = {}) => {
      assertParamExists("conceptSetsPutConcepts", "conceptSetId", conceptSetId);
      assertParamExists("conceptSetsPutConcepts", "updateConceptSetConceptRequestBody", updateConceptSetConceptRequestBody);
      const localVarPath = `/v1/concept_sets/{concept_set_id}/concepts`.replace(`{${"concept_set_id"}}`, encodeURIComponent(String(conceptSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateConceptSetConceptRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} objectId 
     * @param {ConceptSet} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPutOne: async (objectId, conceptSet, options = {}) => {
      assertParamExists("conceptSetsPutOne", "objectId", objectId);
      assertParamExists("conceptSetsPutOne", "conceptSet", conceptSet);
      const localVarPath = `/v1/concept_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Array<ConceptSet>} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptSetsPutSome: async (conceptSet, options = {}) => {
      assertParamExists("conceptSetsPutSome", "conceptSet", conceptSet);
      const localVarPath = `/v1/concept_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(conceptSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/concepts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("conceptsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/concepts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsDeleteSome: async (ids, options = {}) => {
      assertParamExists("conceptsDeleteSome", "ids", ids);
      const localVarPath = `/v1/concepts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsGetAll: async (options = {}) => {
      const localVarPath = `/v1/concepts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsGetOne: async (objectId, options = {}) => {
      assertParamExists("conceptsGetOne", "objectId", objectId);
      const localVarPath = `/v1/concepts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsGetSome: async (ids, options = {}) => {
      assertParamExists("conceptsGetSome", "ids", ids);
      const localVarPath = `/v1/concepts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {Concept} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPostOne: async (concept, options = {}) => {
      assertParamExists("conceptsPostOne", "concept", concept);
      const localVarPath = `/v1/concepts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(concept, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPostQuery: async (filter, options = {}) => {
      assertParamExists("conceptsPostQuery", "filter", filter);
      const localVarPath = `/v1/concepts/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("conceptsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/concepts/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {Array<Concept>} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPostSome: async (concept, options = {}) => {
      assertParamExists("conceptsPostSome", "concept", concept);
      const localVarPath = `/v1/concepts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(concept, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {string} objectId 
     * @param {Concept} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPutOne: async (objectId, concept, options = {}) => {
      assertParamExists("conceptsPutOne", "objectId", objectId);
      assertParamExists("conceptsPutOne", "concept", concept);
      const localVarPath = `/v1/concepts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(concept, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Concepts
     * @param {Array<Concept>} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    conceptsPutSome: async (concept, options = {}) => {
      assertParamExists("conceptsPutSome", "concept", concept);
      const localVarPath = `/v1/concepts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(concept, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/diseases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("diseasesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/diseases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesDeleteSome: async (ids, options = {}) => {
      assertParamExists("diseasesDeleteSome", "ids", ids);
      const localVarPath = `/v1/diseases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesGetAll: async (options = {}) => {
      const localVarPath = `/v1/diseases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesGetOne: async (objectId, options = {}) => {
      assertParamExists("diseasesGetOne", "objectId", objectId);
      const localVarPath = `/v1/diseases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesGetSome: async (ids, options = {}) => {
      assertParamExists("diseasesGetSome", "ids", ids);
      const localVarPath = `/v1/diseases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {Disease} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPostOne: async (disease, options = {}) => {
      assertParamExists("diseasesPostOne", "disease", disease);
      const localVarPath = `/v1/diseases`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(disease, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPostQuery: async (filter, options = {}) => {
      assertParamExists("diseasesPostQuery", "filter", filter);
      const localVarPath = `/v1/diseases/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("diseasesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/diseases/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {Array<Disease>} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPostSome: async (disease, options = {}) => {
      assertParamExists("diseasesPostSome", "disease", disease);
      const localVarPath = `/v1/diseases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(disease, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Disease Etiologicalagent
     * @param {string} diseaseId 
     * @param {UpdateDiseaseEtiologicalAgentRequestBody} updateDiseaseEtiologicalAgentRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPutEtiologicalAgents: async (diseaseId, updateDiseaseEtiologicalAgentRequestBody, options = {}) => {
      assertParamExists("diseasesPutEtiologicalAgents", "diseaseId", diseaseId);
      assertParamExists("diseasesPutEtiologicalAgents", "updateDiseaseEtiologicalAgentRequestBody", updateDiseaseEtiologicalAgentRequestBody);
      const localVarPath = `/v1/diseases/{disease_id}/etiological_agents`.replace(`{${"disease_id"}}`, encodeURIComponent(String(diseaseId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateDiseaseEtiologicalAgentRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {string} objectId 
     * @param {Disease} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPutOne: async (objectId, disease, options = {}) => {
      assertParamExists("diseasesPutOne", "objectId", objectId);
      assertParamExists("diseasesPutOne", "disease", disease);
      const localVarPath = `/v1/diseases/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(disease, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Diseases
     * @param {Array<Disease>} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diseasesPutSome: async (disease, options = {}) => {
      assertParamExists("diseasesPutSome", "disease", disease);
      const localVarPath = `/v1/diseases/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(disease, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/etiological_agents`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("etiologicalAgentsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/etiological_agents/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsDeleteSome: async (ids, options = {}) => {
      assertParamExists("etiologicalAgentsDeleteSome", "ids", ids);
      const localVarPath = `/v1/etiological_agents/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsGetAll: async (options = {}) => {
      const localVarPath = `/v1/etiological_agents`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsGetOne: async (objectId, options = {}) => {
      assertParamExists("etiologicalAgentsGetOne", "objectId", objectId);
      const localVarPath = `/v1/etiological_agents/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsGetSome: async (ids, options = {}) => {
      assertParamExists("etiologicalAgentsGetSome", "ids", ids);
      const localVarPath = `/v1/etiological_agents/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {EtiologicalAgent} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPostOne: async (etiologicalAgent, options = {}) => {
      assertParamExists("etiologicalAgentsPostOne", "etiologicalAgent", etiologicalAgent);
      const localVarPath = `/v1/etiological_agents`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiologicalAgent, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPostQuery: async (filter, options = {}) => {
      assertParamExists("etiologicalAgentsPostQuery", "filter", filter);
      const localVarPath = `/v1/etiological_agents/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("etiologicalAgentsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/etiological_agents/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Array<EtiologicalAgent>} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPostSome: async (etiologicalAgent, options = {}) => {
      assertParamExists("etiologicalAgentsPostSome", "etiologicalAgent", etiologicalAgent);
      const localVarPath = `/v1/etiological_agents/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiologicalAgent, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} objectId 
     * @param {EtiologicalAgent} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPutOne: async (objectId, etiologicalAgent, options = {}) => {
      assertParamExists("etiologicalAgentsPutOne", "objectId", objectId);
      assertParamExists("etiologicalAgentsPutOne", "etiologicalAgent", etiologicalAgent);
      const localVarPath = `/v1/etiological_agents/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiologicalAgent, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Array<EtiologicalAgent>} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologicalAgentsPutSome: async (etiologicalAgent, options = {}) => {
      assertParamExists("etiologicalAgentsPutSome", "etiologicalAgent", etiologicalAgent);
      const localVarPath = `/v1/etiological_agents/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiologicalAgent, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/etiologies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("etiologiesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/etiologies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesDeleteSome: async (ids, options = {}) => {
      assertParamExists("etiologiesDeleteSome", "ids", ids);
      const localVarPath = `/v1/etiologies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesGetAll: async (options = {}) => {
      const localVarPath = `/v1/etiologies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesGetOne: async (objectId, options = {}) => {
      assertParamExists("etiologiesGetOne", "objectId", objectId);
      const localVarPath = `/v1/etiologies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesGetSome: async (ids, options = {}) => {
      assertParamExists("etiologiesGetSome", "ids", ids);
      const localVarPath = `/v1/etiologies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {Etiology} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPostOne: async (etiology, options = {}) => {
      assertParamExists("etiologiesPostOne", "etiology", etiology);
      const localVarPath = `/v1/etiologies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiology, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPostQuery: async (filter, options = {}) => {
      assertParamExists("etiologiesPostQuery", "filter", filter);
      const localVarPath = `/v1/etiologies/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("etiologiesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/etiologies/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {Array<Etiology>} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPostSome: async (etiology, options = {}) => {
      assertParamExists("etiologiesPostSome", "etiology", etiology);
      const localVarPath = `/v1/etiologies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiology, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} objectId 
     * @param {Etiology} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPutOne: async (objectId, etiology, options = {}) => {
      assertParamExists("etiologiesPutOne", "objectId", objectId);
      assertParamExists("etiologiesPutOne", "etiology", etiology);
      const localVarPath = `/v1/etiologies/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiology, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Etiologies
     * @param {Array<Etiology>} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etiologiesPutSome: async (etiology, options = {}) => {
      assertParamExists("etiologiesPutSome", "etiology", etiology);
      const localVarPath = `/v1/etiologies/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(etiology, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const OntologyApiFp = function(configuration) {
  const localVarAxiosParamCreator = OntologyApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Concept Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {ConceptSetMember} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPostOne(conceptSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPostOne(conceptSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Array<ConceptSetMember>} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPostSome(conceptSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPostSome(conceptSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {string} objectId 
     * @param {ConceptSetMember} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPutOne(objectId, conceptSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPutOne(objectId, conceptSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Set Members
     * @param {Array<ConceptSetMember>} conceptSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetMembersPutSome(conceptSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetMembersPutSome(conceptSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {ConceptSet} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPostOne(conceptSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPostOne(conceptSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Array<ConceptSet>} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPostSome(conceptSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPostSome(conceptSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Conceptset Concept
     * @param {string} conceptSetId 
     * @param {UpdateConceptSetConceptRequestBody} updateConceptSetConceptRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPutConcepts(conceptSetId, updateConceptSetConceptRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPutConcepts(conceptSetId, updateConceptSetConceptRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {string} objectId 
     * @param {ConceptSet} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPutOne(objectId, conceptSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPutOne(objectId, conceptSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concept Sets
     * @param {Array<ConceptSet>} conceptSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptSetsPutSome(conceptSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSetsPutSome(conceptSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {Concept} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPostOne(concept, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPostOne(concept, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {Array<Concept>} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPostSome(concept, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPostSome(concept, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {string} objectId 
     * @param {Concept} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPutOne(objectId, concept, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPutOne(objectId, concept, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Concepts
     * @param {Array<Concept>} concept 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async conceptsPutSome(concept, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.conceptsPutSome(concept, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {Disease} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPostOne(disease, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPostOne(disease, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {Array<Disease>} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPostSome(disease, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPostSome(disease, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Disease Etiologicalagent
     * @param {string} diseaseId 
     * @param {UpdateDiseaseEtiologicalAgentRequestBody} updateDiseaseEtiologicalAgentRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPutEtiologicalAgents(diseaseId, updateDiseaseEtiologicalAgentRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPutEtiologicalAgents(diseaseId, updateDiseaseEtiologicalAgentRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {string} objectId 
     * @param {Disease} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPutOne(objectId, disease, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPutOne(objectId, disease, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Diseases
     * @param {Array<Disease>} disease 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diseasesPutSome(disease, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diseasesPutSome(disease, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {EtiologicalAgent} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPostOne(etiologicalAgent, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPostOne(etiologicalAgent, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Array<EtiologicalAgent>} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPostSome(etiologicalAgent, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPostSome(etiologicalAgent, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {string} objectId 
     * @param {EtiologicalAgent} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPutOne(objectId, etiologicalAgent, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPutOne(objectId, etiologicalAgent, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiological Agents
     * @param {Array<EtiologicalAgent>} etiologicalAgent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologicalAgentsPutSome(etiologicalAgent, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologicalAgentsPutSome(etiologicalAgent, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {Etiology} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPostOne(etiology, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPostOne(etiology, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {Array<Etiology>} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPostSome(etiology, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPostSome(etiology, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {string} objectId 
     * @param {Etiology} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPutOne(objectId, etiology, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPutOne(objectId, etiology, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Etiologies
     * @param {Array<Etiology>} etiology 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async etiologiesPutSome(etiology, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.etiologiesPutSome(etiology, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _OntologyApi = class _OntologyApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _OntologyApi();
    return this.instance;
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersDeleteAll(options) {
    return OntologyApiFp(this.configuration).conceptSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersGetAll(options) {
    return OntologyApiFp(this.configuration).conceptSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersGetSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {ConceptSetMember} conceptSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPostOne(conceptSetMember, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPostOne(conceptSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {Array<ConceptSetMember>} conceptSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPostSome(conceptSetMember, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPostSome(conceptSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {string} objectId 
   * @param {ConceptSetMember} conceptSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPutOne(objectId, conceptSetMember, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPutOne(objectId, conceptSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Set Members
   * @param {Array<ConceptSetMember>} conceptSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetMembersPutSome(conceptSetMember, options) {
    return OntologyApiFp(this.configuration).conceptSetMembersPutSome(conceptSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsDeleteAll(options) {
    return OntologyApiFp(this.configuration).conceptSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsGetAll(options) {
    return OntologyApiFp(this.configuration).conceptSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsGetSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {ConceptSet} conceptSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPostOne(conceptSet, options) {
    return OntologyApiFp(this.configuration).conceptSetsPostOne(conceptSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).conceptSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).conceptSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {Array<ConceptSet>} conceptSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPostSome(conceptSet, options) {
    return OntologyApiFp(this.configuration).conceptSetsPostSome(conceptSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Conceptset Concept
   * @param {string} conceptSetId 
   * @param {UpdateConceptSetConceptRequestBody} updateConceptSetConceptRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPutConcepts(conceptSetId, updateConceptSetConceptRequestBody, options) {
    return OntologyApiFp(this.configuration).conceptSetsPutConcepts(conceptSetId, updateConceptSetConceptRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {string} objectId 
   * @param {ConceptSet} conceptSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPutOne(objectId, conceptSet, options) {
    return OntologyApiFp(this.configuration).conceptSetsPutOne(objectId, conceptSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concept Sets
   * @param {Array<ConceptSet>} conceptSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptSetsPutSome(conceptSet, options) {
    return OntologyApiFp(this.configuration).conceptSetsPutSome(conceptSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsDeleteAll(options) {
    return OntologyApiFp(this.configuration).conceptsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsGetAll(options) {
    return OntologyApiFp(this.configuration).conceptsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).conceptsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsGetSome(ids, options) {
    return OntologyApiFp(this.configuration).conceptsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {Concept} concept 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPostOne(concept, options) {
    return OntologyApiFp(this.configuration).conceptsPostOne(concept, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).conceptsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).conceptsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {Array<Concept>} concept 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPostSome(concept, options) {
    return OntologyApiFp(this.configuration).conceptsPostSome(concept, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {string} objectId 
   * @param {Concept} concept 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPutOne(objectId, concept, options) {
    return OntologyApiFp(this.configuration).conceptsPutOne(objectId, concept, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Concepts
   * @param {Array<Concept>} concept 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  conceptsPutSome(concept, options) {
    return OntologyApiFp(this.configuration).conceptsPutSome(concept, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesDeleteAll(options) {
    return OntologyApiFp(this.configuration).diseasesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).diseasesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).diseasesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesGetAll(options) {
    return OntologyApiFp(this.configuration).diseasesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).diseasesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesGetSome(ids, options) {
    return OntologyApiFp(this.configuration).diseasesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {Disease} disease 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPostOne(disease, options) {
    return OntologyApiFp(this.configuration).diseasesPostOne(disease, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).diseasesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).diseasesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {Array<Disease>} disease 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPostSome(disease, options) {
    return OntologyApiFp(this.configuration).diseasesPostSome(disease, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Disease Etiologicalagent
   * @param {string} diseaseId 
   * @param {UpdateDiseaseEtiologicalAgentRequestBody} updateDiseaseEtiologicalAgentRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPutEtiologicalAgents(diseaseId, updateDiseaseEtiologicalAgentRequestBody, options) {
    return OntologyApiFp(this.configuration).diseasesPutEtiologicalAgents(diseaseId, updateDiseaseEtiologicalAgentRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {string} objectId 
   * @param {Disease} disease 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPutOne(objectId, disease, options) {
    return OntologyApiFp(this.configuration).diseasesPutOne(objectId, disease, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Diseases
   * @param {Array<Disease>} disease 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  diseasesPutSome(disease, options) {
    return OntologyApiFp(this.configuration).diseasesPutSome(disease, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsDeleteAll(options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsGetAll(options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsGetSome(ids, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {EtiologicalAgent} etiologicalAgent 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPostOne(etiologicalAgent, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPostOne(etiologicalAgent, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {Array<EtiologicalAgent>} etiologicalAgent 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPostSome(etiologicalAgent, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPostSome(etiologicalAgent, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {string} objectId 
   * @param {EtiologicalAgent} etiologicalAgent 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPutOne(objectId, etiologicalAgent, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPutOne(objectId, etiologicalAgent, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiological Agents
   * @param {Array<EtiologicalAgent>} etiologicalAgent 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologicalAgentsPutSome(etiologicalAgent, options) {
    return OntologyApiFp(this.configuration).etiologicalAgentsPutSome(etiologicalAgent, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesDeleteAll(options) {
    return OntologyApiFp(this.configuration).etiologiesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesDeleteOne(objectId, options) {
    return OntologyApiFp(this.configuration).etiologiesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesDeleteSome(ids, options) {
    return OntologyApiFp(this.configuration).etiologiesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesGetAll(options) {
    return OntologyApiFp(this.configuration).etiologiesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesGetOne(objectId, options) {
    return OntologyApiFp(this.configuration).etiologiesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesGetSome(ids, options) {
    return OntologyApiFp(this.configuration).etiologiesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {Etiology} etiology 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPostOne(etiology, options) {
    return OntologyApiFp(this.configuration).etiologiesPostOne(etiology, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPostQuery(filter, options) {
    return OntologyApiFp(this.configuration).etiologiesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPostQueryIds(filter, options) {
    return OntologyApiFp(this.configuration).etiologiesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {Array<Etiology>} etiology 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPostSome(etiology, options) {
    return OntologyApiFp(this.configuration).etiologiesPostSome(etiology, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {string} objectId 
   * @param {Etiology} etiology 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPutOne(objectId, etiology, options) {
    return OntologyApiFp(this.configuration).etiologiesPutOne(objectId, etiology, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Etiologies
   * @param {Array<Etiology>} etiology 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OntologyApi
   */
  etiologiesPutSome(etiology, options) {
    return OntologyApiFp(this.configuration).etiologiesPutSome(etiology, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_OntologyApi, "instance");
let OntologyApi = _OntologyApi;
const OrganizationApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/contacts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("contactsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/contacts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsDeleteSome: async (ids, options = {}) => {
      assertParamExists("contactsDeleteSome", "ids", ids);
      const localVarPath = `/v1/contacts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsGetAll: async (options = {}) => {
      const localVarPath = `/v1/contacts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsGetOne: async (objectId, options = {}) => {
      assertParamExists("contactsGetOne", "objectId", objectId);
      const localVarPath = `/v1/contacts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsGetSome: async (ids, options = {}) => {
      assertParamExists("contactsGetSome", "ids", ids);
      const localVarPath = `/v1/contacts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Contact} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPostOne: async (contact, options = {}) => {
      assertParamExists("contactsPostOne", "contact", contact);
      const localVarPath = `/v1/contacts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPostQuery: async (filter, options = {}) => {
      assertParamExists("contactsPostQuery", "filter", filter);
      const localVarPath = `/v1/contacts/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("contactsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/contacts/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Array<Contact>} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPostSome: async (contact, options = {}) => {
      assertParamExists("contactsPostSome", "contact", contact);
      const localVarPath = `/v1/contacts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} objectId 
     * @param {Contact} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPutOne: async (objectId, contact, options = {}) => {
      assertParamExists("contactsPutOne", "objectId", objectId);
      assertParamExists("contactsPutOne", "contact", contact);
      const localVarPath = `/v1/contacts/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Array<Contact>} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactsPutSome: async (contact, options = {}) => {
      assertParamExists("contactsPutSome", "contact", contact);
      const localVarPath = `/v1/contacts/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionRelationsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsDeleteSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionRelationsDeleteSome", "ids", ids);
      const localVarPath = `/v1/data_collection_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsGetAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsGetOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionRelationsGetOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsGetSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionRelationsGetSome", "ids", ids);
      const localVarPath = `/v1/data_collection_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {DataCollectionRelation} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPostOne: async (dataCollectionRelation, options = {}) => {
      assertParamExists("dataCollectionRelationsPostOne", "dataCollectionRelation", dataCollectionRelation);
      const localVarPath = `/v1/data_collection_relations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPostQuery: async (filter, options = {}) => {
      assertParamExists("dataCollectionRelationsPostQuery", "filter", filter);
      const localVarPath = `/v1/data_collection_relations/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("dataCollectionRelationsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/data_collection_relations/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Array<DataCollectionRelation>} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPostSome: async (dataCollectionRelation, options = {}) => {
      assertParamExists("dataCollectionRelationsPostSome", "dataCollectionRelation", dataCollectionRelation);
      const localVarPath = `/v1/data_collection_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} objectId 
     * @param {DataCollectionRelation} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPutOne: async (objectId, dataCollectionRelation, options = {}) => {
      assertParamExists("dataCollectionRelationsPutOne", "objectId", objectId);
      assertParamExists("dataCollectionRelationsPutOne", "dataCollectionRelation", dataCollectionRelation);
      const localVarPath = `/v1/data_collection_relations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Array<DataCollectionRelation>} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionRelationsPutSome: async (dataCollectionRelation, options = {}) => {
      assertParamExists("dataCollectionRelationsPutSome", "dataCollectionRelation", dataCollectionRelation);
      const localVarPath = `/v1/data_collection_relations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionRelation, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/data_collection_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/data_collection_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {DataCollectionSetMember} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPostOne: async (dataCollectionSetMember, options = {}) => {
      assertParamExists("dataCollectionSetMembersPostOne", "dataCollectionSetMember", dataCollectionSetMember);
      const localVarPath = `/v1/data_collection_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("dataCollectionSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/data_collection_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("dataCollectionSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/data_collection_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPostSome: async (dataCollectionSetMember, options = {}) => {
      assertParamExists("dataCollectionSetMembersPostSome", "dataCollectionSetMember", dataCollectionSetMember);
      const localVarPath = `/v1/data_collection_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} objectId 
     * @param {DataCollectionSetMember} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPutOne: async (objectId, dataCollectionSetMember, options = {}) => {
      assertParamExists("dataCollectionSetMembersPutOne", "objectId", objectId);
      assertParamExists("dataCollectionSetMembersPutOne", "dataCollectionSetMember", dataCollectionSetMember);
      const localVarPath = `/v1/data_collection_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetMembersPutSome: async (dataCollectionSetMember, options = {}) => {
      assertParamExists("dataCollectionSetMembersPutSome", "dataCollectionSetMember", dataCollectionSetMember);
      const localVarPath = `/v1/data_collection_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/data_collection_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/data_collection_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/data_collection_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsGetSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionSetsGetSome", "ids", ids);
      const localVarPath = `/v1/data_collection_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {DataCollectionSet} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPostOne: async (dataCollectionSet, options = {}) => {
      assertParamExists("dataCollectionSetsPostOne", "dataCollectionSet", dataCollectionSet);
      const localVarPath = `/v1/data_collection_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("dataCollectionSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/data_collection_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("dataCollectionSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/data_collection_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Array<DataCollectionSet>} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPostSome: async (dataCollectionSet, options = {}) => {
      assertParamExists("dataCollectionSetsPostSome", "dataCollectionSet", dataCollectionSet);
      const localVarPath = `/v1/data_collection_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Datacollectionset Datacollection
     * @param {string} dataCollectionSetId 
     * @param {UpdateDataCollectionSetDataCollectionRequestBody} updateDataCollectionSetDataCollectionRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPutDataCollections: async (dataCollectionSetId, updateDataCollectionSetDataCollectionRequestBody, options = {}) => {
      assertParamExists("dataCollectionSetsPutDataCollections", "dataCollectionSetId", dataCollectionSetId);
      assertParamExists("dataCollectionSetsPutDataCollections", "updateDataCollectionSetDataCollectionRequestBody", updateDataCollectionSetDataCollectionRequestBody);
      const localVarPath = `/v1/data_collection_sets/{data_collection_set_id}/data_collections`.replace(`{${"data_collection_set_id"}}`, encodeURIComponent(String(dataCollectionSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateDataCollectionSetDataCollectionRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} objectId 
     * @param {DataCollectionSet} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPutOne: async (objectId, dataCollectionSet, options = {}) => {
      assertParamExists("dataCollectionSetsPutOne", "objectId", objectId);
      assertParamExists("dataCollectionSetsPutOne", "dataCollectionSet", dataCollectionSet);
      const localVarPath = `/v1/data_collection_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Array<DataCollectionSet>} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionSetsPutSome: async (dataCollectionSet, options = {}) => {
      assertParamExists("dataCollectionSetsPutSome", "dataCollectionSet", dataCollectionSet);
      const localVarPath = `/v1/data_collection_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollectionSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/data_collections`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/data_collections/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsDeleteSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionsDeleteSome", "ids", ids);
      const localVarPath = `/v1/data_collections/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsGetAll: async (options = {}) => {
      const localVarPath = `/v1/data_collections`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsGetOne: async (objectId, options = {}) => {
      assertParamExists("dataCollectionsGetOne", "objectId", objectId);
      const localVarPath = `/v1/data_collections/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsGetSome: async (ids, options = {}) => {
      assertParamExists("dataCollectionsGetSome", "ids", ids);
      const localVarPath = `/v1/data_collections/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {DataCollection} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPostOne: async (dataCollection, options = {}) => {
      assertParamExists("dataCollectionsPostOne", "dataCollection", dataCollection);
      const localVarPath = `/v1/data_collections`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollection, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPostQuery: async (filter, options = {}) => {
      assertParamExists("dataCollectionsPostQuery", "filter", filter);
      const localVarPath = `/v1/data_collections/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("dataCollectionsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/data_collections/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Array<DataCollection>} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPostSome: async (dataCollection, options = {}) => {
      assertParamExists("dataCollectionsPostSome", "dataCollection", dataCollection);
      const localVarPath = `/v1/data_collections/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollection, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} objectId 
     * @param {DataCollection} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPutOne: async (objectId, dataCollection, options = {}) => {
      assertParamExists("dataCollectionsPutOne", "objectId", objectId);
      assertParamExists("dataCollectionsPutOne", "dataCollection", dataCollection);
      const localVarPath = `/v1/data_collections/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollection, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Array<DataCollection>} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataCollectionsPutSome: async (dataCollection, options = {}) => {
      assertParamExists("dataCollectionsPutSome", "dataCollection", dataCollection);
      const localVarPath = `/v1/data_collections/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(dataCollection, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/identifier_issuers`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("identifierIssuersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/identifier_issuers/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersDeleteSome: async (ids, options = {}) => {
      assertParamExists("identifierIssuersDeleteSome", "ids", ids);
      const localVarPath = `/v1/identifier_issuers/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersGetAll: async (options = {}) => {
      const localVarPath = `/v1/identifier_issuers`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersGetOne: async (objectId, options = {}) => {
      assertParamExists("identifierIssuersGetOne", "objectId", objectId);
      const localVarPath = `/v1/identifier_issuers/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersGetSome: async (ids, options = {}) => {
      assertParamExists("identifierIssuersGetSome", "ids", ids);
      const localVarPath = `/v1/identifier_issuers/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {IdentifierIssuer} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPostOne: async (identifierIssuer, options = {}) => {
      assertParamExists("identifierIssuersPostOne", "identifierIssuer", identifierIssuer);
      const localVarPath = `/v1/identifier_issuers`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(identifierIssuer, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPostQuery: async (filter, options = {}) => {
      assertParamExists("identifierIssuersPostQuery", "filter", filter);
      const localVarPath = `/v1/identifier_issuers/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("identifierIssuersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/identifier_issuers/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Array<IdentifierIssuer>} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPostSome: async (identifierIssuer, options = {}) => {
      assertParamExists("identifierIssuersPostSome", "identifierIssuer", identifierIssuer);
      const localVarPath = `/v1/identifier_issuers/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(identifierIssuer, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} objectId 
     * @param {IdentifierIssuer} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPutOne: async (objectId, identifierIssuer, options = {}) => {
      assertParamExists("identifierIssuersPutOne", "objectId", objectId);
      assertParamExists("identifierIssuersPutOne", "identifierIssuer", identifierIssuer);
      const localVarPath = `/v1/identifier_issuers/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(identifierIssuer, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Array<IdentifierIssuer>} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierIssuersPutSome: async (identifierIssuer, options = {}) => {
      assertParamExists("identifierIssuersPutSome", "identifierIssuer", identifierIssuer);
      const localVarPath = `/v1/identifier_issuers/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(identifierIssuer, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/organization_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersDeleteOne: async (objectId, options = {}) => {
      assertParamExists("organizationSetMembersDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/organization_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersDeleteSome: async (ids, options = {}) => {
      assertParamExists("organizationSetMembersDeleteSome", "ids", ids);
      const localVarPath = `/v1/organization_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersGetAll: async (options = {}) => {
      const localVarPath = `/v1/organization_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationSetMembersGetOne", "objectId", objectId);
      const localVarPath = `/v1/organization_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersGetSome: async (ids, options = {}) => {
      assertParamExists("organizationSetMembersGetSome", "ids", ids);
      const localVarPath = `/v1/organization_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {OrganizationSetMember} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPostOne: async (organizationSetMember, options = {}) => {
      assertParamExists("organizationSetMembersPostOne", "organizationSetMember", organizationSetMember);
      const localVarPath = `/v1/organization_set_members`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationSetMembersPostQuery", "filter", filter);
      const localVarPath = `/v1/organization_set_members/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationSetMembersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organization_set_members/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Array<OrganizationSetMember>} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPostSome: async (organizationSetMember, options = {}) => {
      assertParamExists("organizationSetMembersPostSome", "organizationSetMember", organizationSetMember);
      const localVarPath = `/v1/organization_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} objectId 
     * @param {OrganizationSetMember} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPutOne: async (objectId, organizationSetMember, options = {}) => {
      assertParamExists("organizationSetMembersPutOne", "objectId", objectId);
      assertParamExists("organizationSetMembersPutOne", "organizationSetMember", organizationSetMember);
      const localVarPath = `/v1/organization_set_members/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Array<OrganizationSetMember>} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetMembersPutSome: async (organizationSetMember, options = {}) => {
      assertParamExists("organizationSetMembersPutSome", "organizationSetMember", organizationSetMember);
      const localVarPath = `/v1/organization_set_members/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSetMember, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/organization_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("organizationSetsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/organization_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsDeleteSome: async (ids, options = {}) => {
      assertParamExists("organizationSetsDeleteSome", "ids", ids);
      const localVarPath = `/v1/organization_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsGetAll: async (options = {}) => {
      const localVarPath = `/v1/organization_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationSetsGetOne", "objectId", objectId);
      const localVarPath = `/v1/organization_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsGetSome: async (ids, options = {}) => {
      assertParamExists("organizationSetsGetSome", "ids", ids);
      const localVarPath = `/v1/organization_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {OrganizationSet} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPostOne: async (organizationSet, options = {}) => {
      assertParamExists("organizationSetsPostOne", "organizationSet", organizationSet);
      const localVarPath = `/v1/organization_sets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationSetsPostQuery", "filter", filter);
      const localVarPath = `/v1/organization_sets/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationSetsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organization_sets/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Array<OrganizationSet>} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPostSome: async (organizationSet, options = {}) => {
      assertParamExists("organizationSetsPostSome", "organizationSet", organizationSet);
      const localVarPath = `/v1/organization_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} objectId 
     * @param {OrganizationSet} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPutOne: async (objectId, organizationSet, options = {}) => {
      assertParamExists("organizationSetsPutOne", "objectId", objectId);
      assertParamExists("organizationSetsPutOne", "organizationSet", organizationSet);
      const localVarPath = `/v1/organization_sets/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organizationset Organization
     * @param {string} organizationSetId 
     * @param {UpdateOrganizationSetOrganizationRequestBody} updateOrganizationSetOrganizationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPutOrganizations: async (organizationSetId, updateOrganizationSetOrganizationRequestBody, options = {}) => {
      assertParamExists("organizationSetsPutOrganizations", "organizationSetId", organizationSetId);
      assertParamExists("organizationSetsPutOrganizations", "updateOrganizationSetOrganizationRequestBody", updateOrganizationSetOrganizationRequestBody);
      const localVarPath = `/v1/organization_sets/{organization_set_id}/organizations`.replace(`{${"organization_set_id"}}`, encodeURIComponent(String(organizationSetId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateOrganizationSetOrganizationRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Array<OrganizationSet>} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationSetsPutSome: async (organizationSet, options = {}) => {
      assertParamExists("organizationSetsPutSome", "organizationSet", organizationSet);
      const localVarPath = `/v1/organization_sets/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSet, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsGetAll: async (options = {}) => {
      const localVarPath = `/v1/organizations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsGetOne: async (objectId, options = {}) => {
      assertParamExists("organizationsGetOne", "objectId", objectId);
      const localVarPath = `/v1/organizations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsGetSome: async (ids, options = {}) => {
      assertParamExists("organizationsGetSome", "ids", ids);
      const localVarPath = `/v1/organizations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Organization} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPostOne: async (organization, options = {}) => {
      assertParamExists("organizationsPostOne", "organization", organization);
      const localVarPath = `/v1/organizations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPostQuery: async (filter, options = {}) => {
      assertParamExists("organizationsPostQuery", "filter", filter);
      const localVarPath = `/v1/organizations/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("organizationsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/organizations/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Array<Organization>} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPostSome: async (organization, options = {}) => {
      assertParamExists("organizationsPostSome", "organization", organization);
      const localVarPath = `/v1/organizations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} objectId 
     * @param {Organization} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPutOne: async (objectId, organization, options = {}) => {
      assertParamExists("organizationsPutOne", "objectId", objectId);
      assertParamExists("organizationsPutOne", "organization", organization);
      const localVarPath = `/v1/organizations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Array<Organization>} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organizationsPutSome: async (organization, options = {}) => {
      assertParamExists("organizationsPutSome", "organization", organization);
      const localVarPath = `/v1/organizations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Retrieveorganizationadminnameemailscommand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOrganizationAdminNameEmails: async (options = {}) => {
      const localVarPath = `/v1/retrieve_organization_admin_name_emails`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/sites`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("sitesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/sites/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesDeleteSome: async (ids, options = {}) => {
      assertParamExists("sitesDeleteSome", "ids", ids);
      const localVarPath = `/v1/sites/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesGetAll: async (options = {}) => {
      const localVarPath = `/v1/sites`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesGetOne: async (objectId, options = {}) => {
      assertParamExists("sitesGetOne", "objectId", objectId);
      const localVarPath = `/v1/sites/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesGetSome: async (ids, options = {}) => {
      assertParamExists("sitesGetSome", "ids", ids);
      const localVarPath = `/v1/sites/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPostOne: async (site, options = {}) => {
      assertParamExists("sitesPostOne", "site", site);
      const localVarPath = `/v1/sites`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPostQuery: async (filter, options = {}) => {
      assertParamExists("sitesPostQuery", "filter", filter);
      const localVarPath = `/v1/sites/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("sitesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/sites/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Array<Site>} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPostSome: async (site, options = {}) => {
      assertParamExists("sitesPostSome", "site", site);
      const localVarPath = `/v1/sites/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} objectId 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPutOne: async (objectId, site, options = {}) => {
      assertParamExists("sitesPutOne", "objectId", objectId);
      assertParamExists("sitesPutOne", "site", site);
      const localVarPath = `/v1/sites/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Array<Site>} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sitesPutSome: async (site, options = {}) => {
      assertParamExists("sitesPutSome", "site", site);
      const localVarPath = `/v1/sites/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(site, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Updateuserownorganization
     * @param {UpdateUserOwnOrganizationRequestBody} updateUserOwnOrganizationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserOwnOrganization: async (updateUserOwnOrganizationRequestBody, options = {}) => {
      assertParamExists("updateUserOwnOrganization", "updateUserOwnOrganizationRequestBody", updateUserOwnOrganizationRequestBody);
      const localVarPath = `/v1/update_user_own_organization`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserOwnOrganizationRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/user_invitations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsDeleteOne: async (objectId, options = {}) => {
      assertParamExists("userInvitationsDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/user_invitations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsDeleteSome: async (ids, options = {}) => {
      assertParamExists("userInvitationsDeleteSome", "ids", ids);
      const localVarPath = `/v1/user_invitations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsGetAll: async (options = {}) => {
      const localVarPath = `/v1/user_invitations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsGetOne: async (objectId, options = {}) => {
      assertParamExists("userInvitationsGetOne", "objectId", objectId);
      const localVarPath = `/v1/user_invitations/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsGetSome: async (ids, options = {}) => {
      assertParamExists("userInvitationsGetSome", "ids", ids);
      const localVarPath = `/v1/user_invitations/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsPostQuery: async (filter, options = {}) => {
      assertParamExists("userInvitationsPostQuery", "filter", filter);
      const localVarPath = `/v1/user_invitations/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary User Invitations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userInvitationsPostQueryIds: async (filter, options = {}) => {
      assertParamExists("userInvitationsPostQueryIds", "filter", filter);
      const localVarPath = `/v1/user_invitations/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Userme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userMeGetOne: async (options = {}) => {
      const localVarPath = `/v1/user_me`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetAll: async (options = {}) => {
      const localVarPath = `/v1/users`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Users
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetOne: async (objectId, options = {}) => {
      assertParamExists("usersGetOne", "objectId", objectId);
      const localVarPath = `/v1/users/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Users
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGetSome: async (ids, options = {}) => {
      assertParamExists("usersGetSome", "ids", ids);
      const localVarPath = `/v1/users/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Users
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPostQuery: async (filter, options = {}) => {
      assertParamExists("usersPostQuery", "filter", filter);
      const localVarPath = `/v1/users/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Users
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPostQueryIds: async (filter, options = {}) => {
      assertParamExists("usersPostQueryIds", "filter", filter);
      const localVarPath = `/v1/users/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Updateuser
     * @param {string} objectId 
     * @param {UpdateUserRequestBody} updateUserRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPutOne: async (objectId, updateUserRequestBody, options = {}) => {
      assertParamExists("usersPutOne", "objectId", objectId);
      assertParamExists("usersPutOne", "updateUserRequestBody", updateUserRequestBody);
      const localVarPath = `/v1/users/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const OrganizationApiFp = function(configuration) {
  const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration);
  return {
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Contact} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPostOne(contact, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPostOne(contact, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Array<Contact>} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPostSome(contact, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPostSome(contact, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {string} objectId 
     * @param {Contact} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPutOne(objectId, contact, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPutOne(objectId, contact, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A class representing contact information for an organization.
     * @summary Contacts
     * @param {Array<Contact>} contact 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contactsPutSome(contact, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.contactsPutSome(contact, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {DataCollectionRelation} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPostOne(dataCollectionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPostOne(dataCollectionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Array<DataCollectionRelation>} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPostSome(dataCollectionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPostSome(dataCollectionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {string} objectId 
     * @param {DataCollectionRelation} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPutOne(objectId, dataCollectionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPutOne(objectId, dataCollectionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a directional relationship between two data collections.
     * @summary Data Collection Relations
     * @param {Array<DataCollectionRelation>} dataCollectionRelation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionRelationsPutSome(dataCollectionRelation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionRelationsPutSome(dataCollectionRelation, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {DataCollectionSetMember} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPostOne(dataCollectionSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPostOne(dataCollectionSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPostSome(dataCollectionSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPostSome(dataCollectionSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {string} objectId 
     * @param {DataCollectionSetMember} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPutOne(objectId, dataCollectionSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPutOne(objectId, dataCollectionSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Set Members
     * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetMembersPutSome(dataCollectionSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetMembersPutSome(dataCollectionSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {DataCollectionSet} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPostOne(dataCollectionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPostOne(dataCollectionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Array<DataCollectionSet>} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPostSome(dataCollectionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPostSome(dataCollectionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Datacollectionset Datacollection
     * @param {string} dataCollectionSetId 
     * @param {UpdateDataCollectionSetDataCollectionRequestBody} updateDataCollectionSetDataCollectionRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPutDataCollections(dataCollectionSetId, updateDataCollectionSetDataCollectionRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPutDataCollections(dataCollectionSetId, updateDataCollectionSetDataCollectionRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {string} objectId 
     * @param {DataCollectionSet} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPutOne(objectId, dataCollectionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPutOne(objectId, dataCollectionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Data Collection Sets
     * @param {Array<DataCollectionSet>} dataCollectionSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionSetsPutSome(dataCollectionSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionSetsPutSome(dataCollectionSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {DataCollection} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPostOne(dataCollection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPostOne(dataCollection, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Array<DataCollection>} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPostSome(dataCollection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPostSome(dataCollection, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {string} objectId 
     * @param {DataCollection} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPutOne(objectId, dataCollection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPutOne(objectId, dataCollection, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a collection of data.
     * @summary Data Collections
     * @param {Array<DataCollection>} dataCollection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataCollectionsPutSome(dataCollection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dataCollectionsPutSome(dataCollection, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {IdentifierIssuer} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPostOne(identifierIssuer, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPostOne(identifierIssuer, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Array<IdentifierIssuer>} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPostSome(identifierIssuer, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPostSome(identifierIssuer, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {string} objectId 
     * @param {IdentifierIssuer} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPutOne(objectId, identifierIssuer, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPutOne(objectId, identifierIssuer, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
     * @summary Identifier Issuers
     * @param {Array<IdentifierIssuer>} identifierIssuer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifierIssuersPutSome(identifierIssuer, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifierIssuersPutSome(identifierIssuer, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {OrganizationSetMember} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPostOne(organizationSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPostOne(organizationSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Array<OrganizationSetMember>} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPostSome(organizationSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPostSome(organizationSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {string} objectId 
     * @param {OrganizationSetMember} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPutOne(objectId, organizationSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPutOne(objectId, organizationSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Set Members
     * @param {Array<OrganizationSetMember>} organizationSetMember 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetMembersPutSome(organizationSetMember, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetMembersPutSome(organizationSetMember, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {OrganizationSet} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPostOne(organizationSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPostOne(organizationSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Array<OrganizationSet>} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPostSome(organizationSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPostSome(organizationSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {string} objectId 
     * @param {OrganizationSet} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPutOne(objectId, organizationSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPutOne(objectId, organizationSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organizationset Organization
     * @param {string} organizationSetId 
     * @param {UpdateOrganizationSetOrganizationRequestBody} updateOrganizationSetOrganizationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPutOrganizations(organizationSetId, updateOrganizationSetOrganizationRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPutOrganizations(organizationSetId, updateOrganizationSetOrganizationRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Organization Sets
     * @param {Array<OrganizationSet>} organizationSet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationSetsPutSome(organizationSet, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationSetsPutSome(organizationSet, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Organization} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPostOne(organization, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPostOne(organization, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Array<Organization>} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPostSome(organization, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPostSome(organization, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {string} objectId 
     * @param {Organization} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPutOne(objectId, organization, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPutOne(objectId, organization, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents an organization.
     * @summary Organizations
     * @param {Array<Organization>} organization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async organizationsPutSome(organization, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.organizationsPutSome(organization, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Retrieveorganizationadminnameemailscommand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveOrganizationAdminNameEmails(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOrganizationAdminNameEmails(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPostOne(site, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPostOne(site, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Array<Site>} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPostSome(site, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPostSome(site, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {string} objectId 
     * @param {Site} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPutOne(objectId, site, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPutOne(objectId, site, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a physical site of an organization.
     * @summary Sites
     * @param {Array<Site>} site 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sitesPutSome(site, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sitesPutSome(site, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Updateuserownorganization
     * @param {UpdateUserOwnOrganizationRequestBody} updateUserOwnOrganizationRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserOwnOrganization(updateUserOwnOrganizationRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserOwnOrganization(updateUserOwnOrganizationRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary User Invitations
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userInvitationsPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userInvitationsPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Userme
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userMeGetOne(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userMeGetOne(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Users
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Users
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Users
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Users
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Updateuser
     * @param {string} objectId 
     * @param {UpdateUserRequestBody} updateUserRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPutOne(objectId, updateUserRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPutOne(objectId, updateUserRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _OrganizationApi = class _OrganizationApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _OrganizationApi();
    return this.instance;
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).contactsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).contactsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).contactsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsGetAll(options) {
    return OrganizationApiFp(this.configuration).contactsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).contactsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).contactsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {Contact} contact 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPostOne(contact, options) {
    return OrganizationApiFp(this.configuration).contactsPostOne(contact, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).contactsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).contactsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {Array<Contact>} contact 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPostSome(contact, options) {
    return OrganizationApiFp(this.configuration).contactsPostSome(contact, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {string} objectId 
   * @param {Contact} contact 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPutOne(objectId, contact, options) {
    return OrganizationApiFp(this.configuration).contactsPutOne(objectId, contact, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A class representing contact information for an organization.
   * @summary Contacts
   * @param {Array<Contact>} contact 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  contactsPutSome(contact, options) {
    return OrganizationApiFp(this.configuration).contactsPutSome(contact, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsGetAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {DataCollectionRelation} dataCollectionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPostOne(dataCollectionRelation, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPostOne(dataCollectionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {Array<DataCollectionRelation>} dataCollectionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPostSome(dataCollectionRelation, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPostSome(dataCollectionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {string} objectId 
   * @param {DataCollectionRelation} dataCollectionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPutOne(objectId, dataCollectionRelation, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPutOne(objectId, dataCollectionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a directional relationship between two data collections.
   * @summary Data Collection Relations
   * @param {Array<DataCollectionRelation>} dataCollectionRelation 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionRelationsPutSome(dataCollectionRelation, options) {
    return OrganizationApiFp(this.configuration).dataCollectionRelationsPutSome(dataCollectionRelation, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersDeleteAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersGetAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {DataCollectionSetMember} dataCollectionSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPostOne(dataCollectionSetMember, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPostOne(dataCollectionSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPostSome(dataCollectionSetMember, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPostSome(dataCollectionSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {string} objectId 
   * @param {DataCollectionSetMember} dataCollectionSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPutOne(objectId, dataCollectionSetMember, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPutOne(objectId, dataCollectionSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Set Members
   * @param {Array<DataCollectionSetMember>} dataCollectionSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetMembersPutSome(dataCollectionSetMember, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetMembersPutSome(dataCollectionSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsGetAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {DataCollectionSet} dataCollectionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPostOne(dataCollectionSet, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPostOne(dataCollectionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {Array<DataCollectionSet>} dataCollectionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPostSome(dataCollectionSet, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPostSome(dataCollectionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Datacollectionset Datacollection
   * @param {string} dataCollectionSetId 
   * @param {UpdateDataCollectionSetDataCollectionRequestBody} updateDataCollectionSetDataCollectionRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPutDataCollections(dataCollectionSetId, updateDataCollectionSetDataCollectionRequestBody, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPutDataCollections(dataCollectionSetId, updateDataCollectionSetDataCollectionRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {string} objectId 
   * @param {DataCollectionSet} dataCollectionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPutOne(objectId, dataCollectionSet, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPutOne(objectId, dataCollectionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Data Collection Sets
   * @param {Array<DataCollectionSet>} dataCollectionSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionSetsPutSome(dataCollectionSet, options) {
    return OrganizationApiFp(this.configuration).dataCollectionSetsPutSome(dataCollectionSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsGetAll(options) {
    return OrganizationApiFp(this.configuration).dataCollectionsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {DataCollection} dataCollection 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPostOne(dataCollection, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPostOne(dataCollection, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {Array<DataCollection>} dataCollection 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPostSome(dataCollection, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPostSome(dataCollection, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {string} objectId 
   * @param {DataCollection} dataCollection 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPutOne(objectId, dataCollection, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPutOne(objectId, dataCollection, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a collection of data.
   * @summary Data Collections
   * @param {Array<DataCollection>} dataCollection 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  dataCollectionsPutSome(dataCollection, options) {
    return OrganizationApiFp(this.configuration).dataCollectionsPutSome(dataCollection, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersDeleteAll(options) {
    return OrganizationApiFp(this.configuration).identifierIssuersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersGetAll(options) {
    return OrganizationApiFp(this.configuration).identifierIssuersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {IdentifierIssuer} identifierIssuer 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPostOne(identifierIssuer, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPostOne(identifierIssuer, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {Array<IdentifierIssuer>} identifierIssuer 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPostSome(identifierIssuer, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPostSome(identifierIssuer, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {string} objectId 
   * @param {IdentifierIssuer} identifierIssuer 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPutOne(objectId, identifierIssuer, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPutOne(objectId, identifierIssuer, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * A system or process that issues identifiers.     The combination (identifier_issuer, issued_identifier) is universally unique.
   * @summary Identifier Issuers
   * @param {Array<IdentifierIssuer>} identifierIssuer 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  identifierIssuersPutSome(identifierIssuer, options) {
    return OrganizationApiFp(this.configuration).identifierIssuersPutSome(identifierIssuer, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersDeleteAll(options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersGetAll(options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {OrganizationSetMember} organizationSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPostOne(organizationSetMember, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPostOne(organizationSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {Array<OrganizationSetMember>} organizationSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPostSome(organizationSetMember, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPostSome(organizationSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {string} objectId 
   * @param {OrganizationSetMember} organizationSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPutOne(objectId, organizationSetMember, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPutOne(objectId, organizationSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Set Members
   * @param {Array<OrganizationSetMember>} organizationSetMember 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetMembersPutSome(organizationSetMember, options) {
    return OrganizationApiFp(this.configuration).organizationSetMembersPutSome(organizationSetMember, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).organizationSetsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).organizationSetsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).organizationSetsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsGetAll(options) {
    return OrganizationApiFp(this.configuration).organizationSetsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).organizationSetsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).organizationSetsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {OrganizationSet} organizationSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPostOne(organizationSet, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPostOne(organizationSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {Array<OrganizationSet>} organizationSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPostSome(organizationSet, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPostSome(organizationSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {string} objectId 
   * @param {OrganizationSet} organizationSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPutOne(objectId, organizationSet, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPutOne(objectId, organizationSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organizationset Organization
   * @param {string} organizationSetId 
   * @param {UpdateOrganizationSetOrganizationRequestBody} updateOrganizationSetOrganizationRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPutOrganizations(organizationSetId, updateOrganizationSetOrganizationRequestBody, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPutOrganizations(organizationSetId, updateOrganizationSetOrganizationRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Organization Sets
   * @param {Array<OrganizationSet>} organizationSet 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationSetsPutSome(organizationSet, options) {
    return OrganizationApiFp(this.configuration).organizationSetsPutSome(organizationSet, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsGetAll(options) {
    return OrganizationApiFp(this.configuration).organizationsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).organizationsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).organizationsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {Organization} organization 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPostOne(organization, options) {
    return OrganizationApiFp(this.configuration).organizationsPostOne(organization, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).organizationsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).organizationsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {Array<Organization>} organization 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPostSome(organization, options) {
    return OrganizationApiFp(this.configuration).organizationsPostSome(organization, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {string} objectId 
   * @param {Organization} organization 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPutOne(objectId, organization, options) {
    return OrganizationApiFp(this.configuration).organizationsPutOne(objectId, organization, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents an organization.
   * @summary Organizations
   * @param {Array<Organization>} organization 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  organizationsPutSome(organization, options) {
    return OrganizationApiFp(this.configuration).organizationsPutSome(organization, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Retrieveorganizationadminnameemailscommand
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  retrieveOrganizationAdminNameEmails(options) {
    return OrganizationApiFp(this.configuration).retrieveOrganizationAdminNameEmails(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesDeleteAll(options) {
    return OrganizationApiFp(this.configuration).sitesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).sitesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).sitesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesGetAll(options) {
    return OrganizationApiFp(this.configuration).sitesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).sitesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).sitesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {Site} site 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPostOne(site, options) {
    return OrganizationApiFp(this.configuration).sitesPostOne(site, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).sitesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).sitesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {Array<Site>} site 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPostSome(site, options) {
    return OrganizationApiFp(this.configuration).sitesPostSome(site, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {string} objectId 
   * @param {Site} site 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPutOne(objectId, site, options) {
    return OrganizationApiFp(this.configuration).sitesPutOne(objectId, site, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a physical site of an organization.
   * @summary Sites
   * @param {Array<Site>} site 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  sitesPutSome(site, options) {
    return OrganizationApiFp(this.configuration).sitesPutSome(site, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Updateuserownorganization
   * @param {UpdateUserOwnOrganizationRequestBody} updateUserOwnOrganizationRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  updateUserOwnOrganization(updateUserOwnOrganizationRequestBody, options) {
    return OrganizationApiFp(this.configuration).updateUserOwnOrganization(updateUserOwnOrganizationRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsDeleteAll(options) {
    return OrganizationApiFp(this.configuration).userInvitationsDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsDeleteOne(objectId, options) {
    return OrganizationApiFp(this.configuration).userInvitationsDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsDeleteSome(ids, options) {
    return OrganizationApiFp(this.configuration).userInvitationsDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsGetAll(options) {
    return OrganizationApiFp(this.configuration).userInvitationsGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).userInvitationsGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).userInvitationsGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).userInvitationsPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary User Invitations
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userInvitationsPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).userInvitationsPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Userme
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  userMeGetOne(options) {
    return OrganizationApiFp(this.configuration).userMeGetOne(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersGetAll(options) {
    return OrganizationApiFp(this.configuration).usersGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Users
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersGetOne(objectId, options) {
    return OrganizationApiFp(this.configuration).usersGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Users
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersGetSome(ids, options) {
    return OrganizationApiFp(this.configuration).usersGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Users
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersPostQuery(filter, options) {
    return OrganizationApiFp(this.configuration).usersPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Users
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersPostQueryIds(filter, options) {
    return OrganizationApiFp(this.configuration).usersPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Updateuser
   * @param {string} objectId 
   * @param {UpdateUserRequestBody} updateUserRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  usersPutOne(objectId, updateUserRequestBody, options) {
    return OrganizationApiFp(this.configuration).usersPutOne(objectId, updateUserRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_OrganizationApi, "instance");
let OrganizationApi = _OrganizationApi;
const SystemApiAxiosParamCreator = function(configuration) {
  return {
    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health: async (options = {}) => {
      const localVarPath = `/v1/health`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Log
     * @param {LogRequestBody} logRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    log: async (logRequestBody, options = {}) => {
      assertParamExists("log", "logRequestBody", logRequestBody);
      const localVarPath = `/v1/log`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(logRequestBody, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesDeleteAll: async (options = {}) => {
      const localVarPath = `/v1/outages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesDeleteOne: async (objectId, options = {}) => {
      assertParamExists("outagesDeleteOne", "objectId", objectId);
      const localVarPath = `/v1/outages/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesDeleteSome: async (ids, options = {}) => {
      assertParamExists("outagesDeleteSome", "ids", ids);
      const localVarPath = `/v1/outages/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesGetAll: async (options = {}) => {
      const localVarPath = `/v1/outages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesGetOne: async (objectId, options = {}) => {
      assertParamExists("outagesGetOne", "objectId", objectId);
      const localVarPath = `/v1/outages/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesGetSome: async (ids, options = {}) => {
      assertParamExists("outagesGetSome", "ids", ids);
      const localVarPath = `/v1/outages/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      if (ids !== void 0) {
        localVarQueryParameter["ids"] = ids;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Outage} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPostOne: async (outage, options = {}) => {
      assertParamExists("outagesPostOne", "outage", outage);
      const localVarPath = `/v1/outages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(outage, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPostQuery: async (filter, options = {}) => {
      assertParamExists("outagesPostQuery", "filter", filter);
      const localVarPath = `/v1/outages/query`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPostQueryIds: async (filter, options = {}) => {
      assertParamExists("outagesPostQueryIds", "filter", filter);
      const localVarPath = `/v1/outages/query/ids`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(filter, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Array<Outage>} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPostSome: async (outage, options = {}) => {
      assertParamExists("outagesPostSome", "outage", outage);
      const localVarPath = `/v1/outages/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(outage, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} objectId 
     * @param {Outage} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPutOne: async (objectId, outage, options = {}) => {
      assertParamExists("outagesPutOne", "objectId", objectId);
      assertParamExists("outagesPutOne", "outage", outage);
      const localVarPath = `/v1/outages/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(objectId)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(outage, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Array<Outage>} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outagesPutSome: async (outage, options = {}) => {
      assertParamExists("outagesPutSome", "outage", outage);
      const localVarPath = `/v1/outages/batch`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(outage, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * 
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveOutages: async (options = {}) => {
      const localVarPath = `/v1/retrieve/outages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const SystemApiFp = function(configuration) {
  const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration);
  return {
    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async health(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Log
     * @param {LogRequestBody} logRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async log(logRequestBody, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.log(logRequestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesDeleteAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesDeleteAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {any} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesDeleteOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesDeleteOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesDeleteSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesDeleteSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesGetAll(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesGetAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} objectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesGetOne(objectId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesGetOne(objectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesGetSome(ids, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesGetSome(ids, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Outage} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPostOne(outage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPostOne(outage, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPostQuery(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPostQuery(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Filter} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPostQueryIds(filter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPostQueryIds(filter, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Array<Outage>} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPostSome(outage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPostSome(outage, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {string} objectId 
     * @param {Outage} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPutOne(objectId, outage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPutOne(objectId, outage, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * Represents a system outage.
     * @summary Outages
     * @param {Array<Outage>} outage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async outagesPutSome(outage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.outagesPutSome(outage, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    },
    /**
     * 
     * @summary Outages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async retrieveOutages(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveOutages(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios);
    }
  };
};
const _SystemApi = class _SystemApi extends BaseAPI {
  static getInstance() {
    this.instance = this.instance || new _SystemApi();
    return this.instance;
  }
  /**
   * 
   * @summary Health
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  health(options) {
    return SystemApiFp(this.configuration).health(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Log
   * @param {LogRequestBody} logRequestBody 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  log(logRequestBody, options) {
    return SystemApiFp(this.configuration).log(logRequestBody, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesDeleteAll(options) {
    return SystemApiFp(this.configuration).outagesDeleteAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {any} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesDeleteOne(objectId, options) {
    return SystemApiFp(this.configuration).outagesDeleteOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesDeleteSome(ids, options) {
    return SystemApiFp(this.configuration).outagesDeleteSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesGetAll(options) {
    return SystemApiFp(this.configuration).outagesGetAll(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {string} objectId 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesGetOne(objectId, options) {
    return SystemApiFp(this.configuration).outagesGetOne(objectId, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {string} ids 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesGetSome(ids, options) {
    return SystemApiFp(this.configuration).outagesGetSome(ids, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {Outage} outage 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPostOne(outage, options) {
    return SystemApiFp(this.configuration).outagesPostOne(outage, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPostQuery(filter, options) {
    return SystemApiFp(this.configuration).outagesPostQuery(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {Filter} filter 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPostQueryIds(filter, options) {
    return SystemApiFp(this.configuration).outagesPostQueryIds(filter, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {Array<Outage>} outage 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPostSome(outage, options) {
    return SystemApiFp(this.configuration).outagesPostSome(outage, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {string} objectId 
   * @param {Outage} outage 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPutOne(objectId, outage, options) {
    return SystemApiFp(this.configuration).outagesPutOne(objectId, outage, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * Represents a system outage.
   * @summary Outages
   * @param {Array<Outage>} outage 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  outagesPutSome(outage, options) {
    return SystemApiFp(this.configuration).outagesPutSome(outage, options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
  /**
   * 
   * @summary Outages
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApi
   */
  retrieveOutages(options) {
    return SystemApiFp(this.configuration).retrieveOutages(options).then((request) => request(this.axios, this.configuration.baseUrl));
  }
};
__publicField(_SystemApi, "instance");
let SystemApi = _SystemApi;

export { AbacApi, AuthApi, AuthProtocol, BASE_PATH, BaseAPI, BooleanOperator, COLLECTION_FORMATS, CaseApi, CaseClassification, CaseTypeSetCategoryPurpose, ColType, CommandName, ComparisonOperator, ConceptSetType, Configuration, DefaultApi, DimType, GeoApi, HealthStatus, LogLevel, OauthFlowType, OntologyApi, OrganizationApi, PermissionType, RegionRelationType, RequiredError, Role, SystemApi, TreeAlgorithmType, TypedCompositeFilterType, TypedDateRangeFilterType, TypedDatetimeRangeFilterType, TypedEqualsBooleanFilterType, TypedEqualsNumberFilterType, TypedEqualsStringFilterType, TypedEqualsUuidFilterType, TypedExistsFilterType, TypedNoFilterType, TypedNumberRangeFilterType, TypedNumberSetFilterType, TypedPartialDateRangeFilterType, TypedRegexFilterType, TypedStringSetFilterType, TypedUuidSetFilterType };
